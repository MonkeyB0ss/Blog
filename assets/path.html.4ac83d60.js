import{_ as a}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as e,c as h,e as i}from"./app.08346de6.js";const t="/Blog/assets/path1.bc4be5b4.png",r="/Blog/assets/path2.11405e4f.png",s="/Blog/assets/path3.3abc1a65.png",n="/Blog/assets/path4.b9260f6c.png",d={},c=i('<h1 id="path、paths、files的使用" tabindex="-1"><a class="header-anchor" href="#path、paths、files的使用" aria-hidden="true">#</a> Path、Paths、Files的使用</h1><h2 id="nio的使用说明" tabindex="-1"><a class="header-anchor" href="#nio的使用说明" aria-hidden="true">#</a> NIO的使用说明</h2><ul><li>Java NIO (New IO，Non-Blocking IO)是从Java 1.4版本开始引入的一套新的IO API，可以替代标准的Java IO AP。</li><li>NIO与原来的IO同样的作用和目的，但是使用的方式完全不同，NIO支持面向缓冲区的(IO是面向流的)、基于 通道的IO操作。</li><li>NIO将以更加高效的方式进行文件的读写操作。</li><li>随着 JDK 7 的发布，Java对NIO进行了极大的扩展，增强了对文件处理和文件系统特性的支持，以至于我们称他们为 NIO.2。</li></ul><h2 id="path的使用" tabindex="-1"><a class="header-anchor" href="#path的使用" aria-hidden="true">#</a> Path的使用</h2><h3 id="path的说明" tabindex="-1"><a class="header-anchor" href="#path的说明" aria-hidden="true">#</a> Path的说明</h3><p>Path替换原有的File类。</p><h3 id="如何实例化" tabindex="-1"><a class="header-anchor" href="#如何实例化" aria-hidden="true">#</a> 如何实例化</h3><p><img src="'+t+'" alt="img.png"></p><h3 id="常用方法" tabindex="-1"><a class="header-anchor" href="#常用方法" aria-hidden="true">#</a> 常用方法</h3><p><img src="'+r+'" alt="img.png"></p><h2 id="files工具类" tabindex="-1"><a class="header-anchor" href="#files工具类" aria-hidden="true">#</a> Files工具类</h2><h3 id="作用" tabindex="-1"><a class="header-anchor" href="#作用" aria-hidden="true">#</a> 作用</h3><p>操作文件或文件目录的工具类</p><h3 id="常用方法-1" tabindex="-1"><a class="header-anchor" href="#常用方法-1" aria-hidden="true">#</a> 常用方法</h3><p><img src="'+s+'" alt="img.png"><img src="'+n+'" alt="img_1.png"></p>',15),l=[c];function o(p,_){return e(),h("div",null,l)}const m=a(d,[["render",o],["__file","path.html.vue"]]);export{m as default};
