import{_ as e}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as a,c as t,e as r}from"./app.37a7d487.js";const c={},o=r('<h1 id="泛型的理解" tabindex="-1"><a class="header-anchor" href="#泛型的理解" aria-hidden="true">#</a> 泛型的理解</h1><h2 id="泛型的概念" tabindex="-1"><a class="header-anchor" href="#泛型的概念" aria-hidden="true">#</a> 泛型的概念</h2><p>所谓泛型，就是允许在定义类、接口时通过一个标识表示类中某个属性的类型或者是某个方法的返 回值及参数类型。这个类型参数将在使用时（例如，继承或实现这个接口，用这个类型声明变量、 创建对象时确定（即传入实际的类型参数，也称为类型实参）。</p><h2 id="泛型的引入背景" tabindex="-1"><a class="header-anchor" href="#泛型的引入背景" aria-hidden="true">#</a> 泛型的引入背景</h2><p>集合容器类在设计阶段/声明阶段不能确定这个容器到底实际存的是什么类型的对象，所以在<mark>JDK1.5之前只能把元素类型设计为Object，JDK1.5之后使用泛型来解决</mark>。 因为这个时候除了元素的类型不确定，其他的部分是确定的，例如关于这个元素如何保存，如何管理等是确定的，因此此时<mark>把元素的类型设计成一个参数，这个类型参数叫做泛型</mark>。 <code>Collection&lt;E&gt;</code>,<code>List&lt;E&gt;</code>,<code>ArrayList&lt;E&gt;</code>这个<code>&lt;E&gt;</code>就是类型参数，即泛型。</p>',5),d=[o];function i(n,h){return a(),t("div",null,d)}const _=e(c,[["render",i],["__file","generic.html.vue"]]);export{_ as default};
