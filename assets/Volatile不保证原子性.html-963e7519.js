const e=JSON.parse('{"key":"v-6bdaf652","path":"/other/audition/JUC/Volatile%E4%B8%8D%E4%BF%9D%E8%AF%81%E5%8E%9F%E5%AD%90%E6%80%A7.html","title":"Volatile不保证原子性","lang":"zh-CN","frontmatter":{"date":"2023-03-30T00:00:00.000Z","category":"面试","tag":["JUC"]},"headers":[{"level":2,"title":"前言","slug":"前言","link":"#前言","children":[]},{"level":2,"title":"原子性","slug":"原子性","link":"#原子性","children":[]},{"level":2,"title":"代码测试","slug":"代码测试","link":"#代码测试","children":[]},{"level":2,"title":"为什么出现数值丢失","slug":"为什么出现数值丢失","link":"#为什么出现数值丢失","children":[]},{"level":2,"title":"如何解决","slug":"如何解决","link":"#如何解决","children":[]},{"level":2,"title":"其它解决方法","slug":"其它解决方法","link":"#其它解决方法","children":[]},{"level":2,"title":"字节码指令表","slug":"字节码指令表","link":"#字节码指令表","children":[]}],"git":{"createdTime":1680189607000,"updatedTime":1680189607000,"contributors":[{"name":"MonkeyBoss","email":"1912290362@qq.com","commits":1}]},"readingTime":{"minutes":18.74,"words":5623},"filePathRelative":"other/audition/JUC/Volatile不保证原子性.md","localizedDate":"2023年3月30日","excerpt":"<h1> Volatile不保证原子性</h1>\\n<h2> 前言</h2>\\n<p>通过前面对JMM的介绍，我们知道，各个线程对主内存中共享变量的操作都是各个线程各自拷贝到自己的工作内存进行操作后在写回到主内存中的。</p>\\n<p>这就可能存在一个线程AAA修改了共享变量X的值，但是还未写入主内存时，另外一个线程BBB又对主内存中同一共享变量X进行操作，但此时A线程工作内存中共享变量X对线程B来说是不可见，这种工作内存与主内存同步延迟现象就造成了可见性问题。</p>\\n<h2> 原子性</h2>\\n<p>不可分割，完整性，也就是说某个线程正在做某个具体业务时，中间不可以被加塞或者被分割，需要具体完成，要么同时成功，要么同时失败。</p>"}');export{e as data};
