import{_ as a}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as n,c as s,e}from"./app.83f8fc33.js";const c="/Blog/assets/thought.3e807ecf.png",t="/Blog/assets/memory.bfe5d195.png",o={},p=e('<h1 id="类与对象" tabindex="-1"><a class="header-anchor" href="#类与对象" aria-hidden="true">#</a> 类与对象</h1><h2 id="面向对象学习的三条主线" tabindex="-1"><a class="header-anchor" href="#面向对象学习的三条主线" aria-hidden="true">#</a> 面向对象学习的三条主线</h2><h3 id="_1-java类及类的成员" tabindex="-1"><a class="header-anchor" href="#_1-java类及类的成员" aria-hidden="true">#</a> 1. Java类及类的成员</h3><p><code>属性</code> <code>方法</code> <code>构造器</code> <code>代码块</code> <code>内部类</code></p><h3 id="_2-面向对象的大特征" tabindex="-1"><a class="header-anchor" href="#_2-面向对象的大特征" aria-hidden="true">#</a> 2. 面向对象的大特征</h3><p><code>封装性</code> <code>继承性</code> <code>多态性(抽象性)</code></p><h3 id="_3-其它关键字" tabindex="-1"><a class="header-anchor" href="#_3-其它关键字" aria-hidden="true">#</a> 3. 其它关键字</h3><p><code>this</code> <code>super</code> <code>static</code> <code>final</code> <code>abstract</code> <code>interface</code> <code>package</code> <code>import</code> ...</p><div class="custom-container tip"><p class="custom-container-title">提示</p><p>大处着眼，小处着手</p></div><h2 id="面向对象与面向过程-理解" tabindex="-1"><a class="header-anchor" href="#面向对象与面向过程-理解" aria-hidden="true">#</a> 面向对象与面向过程（理解）</h2><h3 id="面向过程" tabindex="-1"><a class="header-anchor" href="#面向过程" aria-hidden="true">#</a> 面向过程</h3><p>强调的是功能行为，以函数为最小单位，考虑怎么做。</p><h3 id="面向对象" tabindex="-1"><a class="header-anchor" href="#面向对象" aria-hidden="true">#</a> 面向对象</h3><p>强调具备了功能的对象，以类/对象为最小单位，考虑谁来做。</p><div class="custom-container info"><p class="custom-container-title">举例对比</p><p>人把大象装进冰箱</p></div><h3 id="完成一个项目-或功能-的思路" tabindex="-1"><a class="header-anchor" href="#完成一个项目-或功能-的思路" aria-hidden="true">#</a> 完成一个项目（或功能）的思路</h3><p><img src="'+c+`" alt="img.png" loading="lazy"></p><h3 id="面向对象中两个重要的概念" tabindex="-1"><a class="header-anchor" href="#面向对象中两个重要的概念" aria-hidden="true">#</a> 面向对象中两个重要的概念</h3><ul><li><code>类</code>：对一类事物的描述，是抽象的、概念上的定义</li><li><code>对象</code>：是实际存在的该类事物的每个个体，因而也称为实例(instance)</li></ul><div class="custom-container tip"><p class="custom-container-title">提示</p><p>面向对象程序设计的重点是类的设计 设计类，就是设计类的成员</p></div><div class="custom-container warning"><p class="custom-container-title">二者的关系</p><p><code>对象</code>，是由<code>类</code><mark>new出来的，派生出来的</mark>。</p></div><h3 id="面向对象思想落地实现的规则" tabindex="-1"><a class="header-anchor" href="#面向对象思想落地实现的规则" aria-hidden="true">#</a> 面向对象思想落地实现的规则</h3><ol><li>创建类，设计类的成员</li><li>创建类的对象</li><li>通过<code>对象.属性</code>或<code>对象.方法</code>调用对象的结构</li></ol><div class="custom-container info"><p class="custom-container-title">补充：几个概念的使用说明</p><p>属性 = 成员变量 = field = 域、字段<br> 方法 = 成员方法 = 函数 = method<br> 创建类的对象 = 类的实例化 = 实例化类</p></div><h3 id="对象的创建与对象的内存解析" tabindex="-1"><a class="header-anchor" href="#对象的创建与对象的内存解析" aria-hidden="true">#</a> 对象的创建与对象的内存解析</h3><p>典型代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Person</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Person</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 没有新创建一个对象，共用一个堆空间中的对象实体。</span>
<span class="token class-name">Person</span> p3 <span class="token operator">=</span> p1<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">说明</p><p>如果创建了一个类的多个对象，则每个对象都独立的拥有一套类的属性。（非static的）<br> 意味着：如果我们修改一个对象的属性a，则不影响另外一个对象属性a的值。</p></div><p>内存解析：</p><p><img src="`+t+`" alt="img_2.png" loading="lazy"></p><h3 id="匿名对象" tabindex="-1"><a class="header-anchor" href="#匿名对象" aria-hidden="true">#</a> 匿名对象</h3><p>我们创建的对象，没显式的赋给一个变量名。即为<code>匿名对象</code></p><div class="custom-container info"><p class="custom-container-title">相关信息</p><p>特点：匿名对象只能调用一次。</p><p>举例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">new</span> <span class="token class-name">Phone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sendEmail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">new</span> <span class="token class-name">Phone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">playGame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">new</span> <span class="token class-name">Phone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>price <span class="token operator">=</span> <span class="token number">1999</span><span class="token punctuation">;</span>
<span class="token comment">// 0.0</span>
<span class="token keyword">new</span> <span class="token class-name">Phone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">showPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>应用场景：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">PhoneMall</span> mall <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PhoneMall</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>匿名对象的使用：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>mall<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Phone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 其中，</span>
<span class="token keyword">class</span> <span class="token class-name">PhoneMall</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token class-name">Phone</span> phone<span class="token punctuation">)</span><span class="token punctuation">{</span>
        phone<span class="token punctuation">.</span><span class="token function">sendEmail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        phone<span class="token punctuation">.</span><span class="token function">playGame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h3 id="万事万物皆对象" tabindex="-1"><a class="header-anchor" href="#万事万物皆对象" aria-hidden="true">#</a> &quot;万事万物皆对象&quot;</h3><ol><li>在Java语言范畴中，我们都将功能、结构等封装到类中，通过类的实例化，来调用具体的功能结构 <ul><li>Scanner,String等</li><li>文件：File</li><li>网络资源：URL</li></ul></li><li>涉及到Java语言与前端Html、后端的数据库交互时，前后端的结构在Java层面交互时，都体现为类、对象。</li></ol>`,35),i=[p];function l(d,u){return n(),s("div",null,i)}const k=a(o,[["render",l],["__file","class.html.vue"]]);export{k as default};
