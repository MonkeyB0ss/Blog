const n=JSON.parse('{"key":"v-35241c05","path":"/java/java-advanced/reflection/apply4.html","title":"反射应用四：动态代理","lang":"zh-CN","frontmatter":{"date":"2022-12-04T00:00:00.000Z","category":"基础进阶","tag":["JAVA"]},"headers":[{"level":2,"title":"代理模式的原理","slug":"代理模式的原理","link":"#代理模式的原理","children":[]},{"level":2,"title":"静态代理","slug":"静态代理","link":"#静态代理","children":[{"level":3,"title":"举例","slug":"举例","link":"#举例","children":[]},{"level":3,"title":"静态代理的缺点","slug":"静态代理的缺点","link":"#静态代理的缺点","children":[]}]},{"level":2,"title":"动态代理的特点","slug":"动态代理的特点","link":"#动态代理的特点","children":[]},{"level":2,"title":"动态代理的实现","slug":"动态代理的实现","link":"#动态代理的实现","children":[{"level":3,"title":"需要解决的两个主要问题","slug":"需要解决的两个主要问题","link":"#需要解决的两个主要问题","children":[]},{"level":3,"title":"代码实现","slug":"代码实现","link":"#代码实现","children":[]}]}],"git":{"createdTime":1670087861000,"updatedTime":1670087861000,"contributors":[{"name":"MonkeyBoss","email":"1912290362@qq.com","commits":1}]},"readingTime":{"minutes":2.53,"words":758},"filePathRelative":"java/java-advanced/reflection/apply4.md","localizedDate":"2022年12月4日","excerpt":"<h1> 反射应用四：动态代理</h1>\\n<h2> 代理模式的原理</h2>\\n<p>使用一个代理将对象包装起来, 然后用该代理对象取代原始对象。任何对原始对象的调用都要通过代理。代理对象决定是否以及何时将方法调用转到原始对象上。</p>\\n<h2> 静态代理</h2>\\n<h3> 举例</h3>\\n<p>实现Runnable接口的方法创建多线程。</p>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token class-name\\">Class</span> <span class=\\"token class-name\\">MyThread</span> <span class=\\"token keyword\\">implements</span> <span class=\\"token class-name\\">Runnable</span><span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span> <span class=\\"token comment\\">//相当于被代理类</span>\\n<span class=\\"token class-name\\">Class</span> <span class=\\"token class-name\\">Thread</span> <span class=\\"token keyword\\">implements</span> <span class=\\"token class-name\\">Runnable</span><span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span> <span class=\\"token comment\\">//相当于代理类</span>\\n<span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n\\t<span class=\\"token class-name\\">MyThread</span> t <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">MyThread</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token class-name\\">Thread</span> thread <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Thread</span><span class=\\"token punctuation\\">(</span>t<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\tthread<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">start</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//启动线程；调用线程的run()</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>"}');export{n as data};
