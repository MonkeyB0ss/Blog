import{_ as a}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as n,c as s,e}from"./app.db07fe51.js";const i="/Blog/assets/polymorphic.2cdf5214.png",c={},l=e(`<h1 id="面向对象的特征三-多态性" tabindex="-1"><a class="header-anchor" href="#面向对象的特征三-多态性" aria-hidden="true">#</a> 面向对象的特征三：多态性</h1><h2 id="多态性的理解" tabindex="-1"><a class="header-anchor" href="#多态性的理解" aria-hidden="true">#</a> 多态性的理解</h2><p>可以理解为一个事物的多种形态。</p><h2 id="何为多态性" tabindex="-1"><a class="header-anchor" href="#何为多态性" aria-hidden="true">#</a> 何为多态性</h2><p>对象的多态性：父类的引用指向子类的对象（或子类的对象赋给父类的引用） 举例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Person</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Man</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Object</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="多态性的使用" tabindex="-1"><a class="header-anchor" href="#多态性的使用" aria-hidden="true">#</a> 多态性的使用</h2><ol><li>有了对象的多态性以后，我们在编译期，只能调用父类中声明的方法，但在运行期，我们实际执行的是子类重写父类的方法。</li><li>总结：<code>编译</code>，看左边；<code>运行</code>，看右边。</li></ol><h2 id="多态性的使用前提" tabindex="-1"><a class="header-anchor" href="#多态性的使用前提" aria-hidden="true">#</a> 多态性的使用前提</h2><ol><li>类的继承关系</li><li>方法的重写</li></ol><h2 id="多态性的应用举例" tabindex="-1"><a class="header-anchor" href="#多态性的应用举例" aria-hidden="true">#</a> 多态性的应用举例</h2><p>举例一：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token class-name">Animal</span> animal<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">// Animal animal = new Dog();</span>
    animal<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    animal<span class="token punctuation">.</span><span class="token function">shout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>举例二：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span><span class="token punctuation">{</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>举例三：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Driver</span><span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doData</span><span class="token punctuation">(</span><span class="token class-name">Connection</span> conn<span class="token punctuation">)</span><span class="token punctuation">{</span>
	    <span class="token comment">// conn = new MySQlConnection(); </span>
	    <span class="token comment">// conn = new OracleConnection();</span>
		<span class="token comment">// 规范的步骤去操作数据</span>
        <span class="token comment">// conn.method1();</span>
        <span class="token comment">// conn.method2();</span>
        <span class="token comment">// conn.method3();</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="多态性使用的注意点" tabindex="-1"><a class="header-anchor" href="#多态性使用的注意点" aria-hidden="true">#</a> 多态性使用的注意点</h2><p><strong>对象的多态性，只适用于方法，不适用于属性（编译和运行都看左边）</strong></p><h2 id="关于向上转型与向下转型" tabindex="-1"><a class="header-anchor" href="#关于向上转型与向下转型" aria-hidden="true">#</a> 关于向上转型与向下转型</h2><h3 id="向上转型" tabindex="-1"><a class="header-anchor" href="#向上转型" aria-hidden="true">#</a> 向上转型</h3><p><strong>多态</strong></p><h3 id="向下转型" tabindex="-1"><a class="header-anchor" href="#向下转型" aria-hidden="true">#</a> 向下转型</h3><ol><li>为什么使用向下转 有了对象的多态性以后，内存中实际上是加载了子类特有的属性和方法的，但是由于变量声明为父类类型，导致编译时，只能调用父类中声明的属性和方法。子类特有的属性和方法不能调用。如何才能调用子类特的属性和方法？使用向下转型。</li><li>如何实现向下转型 使用强制类型转换符：<code>()</code></li><li>使用时的注意点 <ol><li>使用强转时，可能出现<code>ClassCastException</code>的异常。</li><li>为了避免在向下转型时出现<code>ClassCastException</code>的异常，我们在向下转型之前，先进行<code>instanceof</code> 的判断，一旦返回true，就进行向下转型。如果返回false，不进行向下转型。</li></ol></li><li><code>instanceof</code>的使用： <ol><li>a instanceof A:判断对象a是否是类A的实例。如果是，返回true；如果不是，返回false。</li><li>如果 a instanceof A返回true,则 a instanceof B也返回true.其中，类B是类A的父类。</li><li>要求a所属的类与类A必须是子类和父类的关系，否则编译错误。</li></ol></li><li>图示：<br><img src="`+i+'" alt="img.png" loading="lazy"></li></ol><h3 id="面试题" tabindex="-1"><a class="header-anchor" href="#面试题" aria-hidden="true">#</a> 面试题</h3><ol><li>谈谈你对多态性的理解？ <ol><li>实现代码的通用性。</li><li><code>Object</code>类中定义的public boolean equals(Object obj) <ul><li><code>JDBC</code>:使用java程序操作(获取数据库连接、CRUD)数据库(MySQL、Oracle、DB2、SQL Server)</li></ul></li><li>抽象类、接口的使用肯定体现了多态性。（抽象类、接口不能实例化）</li></ol></li><li>多态是编译时行为还是运行时行为？</li></ol>',26),o=[l];function t(p,d){return n(),s("div",null,o)}const h=a(c,[["render",t],["__file","polymorphic.html.vue"]]);export{h as default};
