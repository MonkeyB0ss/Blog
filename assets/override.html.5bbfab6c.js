const e=JSON.parse('{"key":"v-11b2fbd6","path":"/java/java-basic/object/override.html","title":"方法的重写","lang":"zh-CN","frontmatter":{"date":"2022-11-21T00:00:00.000Z","category":["基础"],"tag":["JAVA"],"description":"什么是方法的重写❓ override 或 overwrite 子类继承父类以后，可以对父类中同名同参数的方法，进行覆盖操作. 应用 重写以后，当创建子类对象以后，通过子类对象调用子父类中的同名同参数的方法时，实际执行的是子类重写父类的方法。 举例 重写的规则 方法的声明 约定俗称：子类中的叫重写的方法，父类中的叫被重写的方法 1. 子类重写的方法的方法...","head":[["meta",{"property":"og:url","content":"https://monkeyb0ss.github.io/Blog/java/java-basic/object/override.html"}],["meta",{"property":"og:site_name","content":"MonkeyBoss"}],["meta",{"property":"og:title","content":"方法的重写"}],["meta",{"property":"og:description","content":"什么是方法的重写❓ override 或 overwrite 子类继承父类以后，可以对父类中同名同参数的方法，进行覆盖操作. 应用 重写以后，当创建子类对象以后，通过子类对象调用子父类中的同名同参数的方法时，实际执行的是子类重写父类的方法。 举例 重写的规则 方法的声明 约定俗称：子类中的叫重写的方法，父类中的叫被重写的方法 1. 子类重写的方法的方法..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2022-11-22T14:44:48.000Z"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:tag","content":"JAVA"}],["meta",{"property":"article:published_time","content":"2022-11-21T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2022-11-22T14:44:48.000Z"}]]},"excerpt":"","headers":[{"level":2,"title":"什么是方法的重写❓","slug":"什么是方法的重写❓","link":"#什么是方法的重写❓","children":[]},{"level":2,"title":"应用","slug":"应用","link":"#应用","children":[]},{"level":2,"title":"举例","slug":"举例","link":"#举例","children":[]},{"level":2,"title":"重写的规则","slug":"重写的规则","link":"#重写的规则","children":[]},{"level":2,"title":"面试题","slug":"面试题","link":"#面试题","children":[]}],"git":{"createdTime":1669128288000,"updatedTime":1669128288000,"contributors":[{"name":"MonkeyBoss","email":"1912290362@qq.com","commits":1}]},"readingTime":{"minutes":2.67,"words":800},"filePathRelative":"java/java-basic/object/override.md","localizedDate":"2022年11月21日"}');export{e as data};
