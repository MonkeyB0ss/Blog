import{_ as e}from"./_plugin-vue_export-helper.cdc0426e.js";import{o,c as n,e as s}from"./app.8925ff20.js";const a={},r=s(`<h1 id="第10章-索引优化与查询优化" tabindex="-1"><a class="header-anchor" href="#第10章-索引优化与查询优化" aria-hidden="true">#</a> 第10章_索引优化与查询优化</h1><h2 id="_1-索引失效案例" tabindex="-1"><a class="header-anchor" href="#_1-索引失效案例" aria-hidden="true">#</a> <strong>1.</strong> <strong>索引失效案例</strong></h2><p>MySQL中<code>提高性能</code>的一个最有效的方式是对数据表<code>设计合理的索引</code>。索引提供了访问高效数据的方法，并且加快查询的速度，因此索引对查询的速度有着至关重要的影响。</p><ul><li>使用索引可以<code>快速地定位</code>表中的某条记录，从而提高数据库查询的速度，提高数据库的性能。</li><li>如果查询时没有使用索引，查询语句就会<code>扫描表中的所有记录</code>。在数据量大的情况下，这样查询的速度会很慢。</li></ul><p>大多数情况下都（默认）采用<code>B+树</code>来构建索引。只是空间列类型的索引使用<code>R-树</code>，并且MEMORY表还支持<code>hash索引</code>。</p><p>其实，用不用索引，最终都是优化器说了算。优化器是基于什么的优化器？基于<code>cost开销(CostBaseOptimizer)</code> ，它不是基于<code>规则(Rule-BasedOptimizer)</code>，也不是基于<code>语义</code>。怎么样开销小就怎么来。另外， <strong>SQL语句是否使用索引，跟数据库版本、数据量、数据选择度都有关系。</strong></p><h3 id="_1-1-全值匹配我最爱" tabindex="-1"><a class="header-anchor" href="#_1-1-全值匹配我最爱" aria-hidden="true">#</a> <strong>1.1</strong> <strong>全值匹配我最爱</strong></h3><h3 id="_1-2-最佳左前缀法则" tabindex="-1"><a class="header-anchor" href="#_1-2-最佳左前缀法则" aria-hidden="true">#</a> <strong>1.2</strong> <strong>最佳左前缀法则</strong></h3><p>在MySQL建立联合索引时会遵守最佳左前缀匹配原则，即最左优先，在检索数据时从联合索引的最左边开始匹配。</p><p>结论：MySQL可以为多个字段创建索引，一个索引可以包括16个字段。对于多列索引， <strong>过滤条件要使用索引必须按照索引建立时的顺序，依次满足，一旦跳过某个字段，索引后面的字段都无法被使用。</strong> 如果查询条件中没有使用这些字段中第1个字段时，多列（或联合）索引不会被使用。</p><h3 id="_1-3-主键插入顺序" tabindex="-1"><a class="header-anchor" href="#_1-3-主键插入顺序" aria-hidden="true">#</a> <strong>1.3</strong> <strong>主键插入顺序</strong></h3><p>对于一个使用<code>InnoDB</code>存储引擎的表来说，在我们没有显示的创建索引时，表中的数据实际上都是存储在<code>聚簇索引</code> 的叶子节点的。而记录又存储在数据页中的，数据页和记录又是按照记录<code>主键值从小到大</code>的顺序进行排序，所以如果我们<code>插入</code> 的记录的<code>主键值是依次增大</code>的话，那我们每插满一个数据页就换到下一个数据页继续插，而如果我们插入的<code>主键值忽小忽大</code> 的话，则可能会造成<code>页面分裂</code>和<code>记录移位</code>。</p><h3 id="_1-4-计算、函数、类型转换-自动或手动-导致索引失效" tabindex="-1"><a class="header-anchor" href="#_1-4-计算、函数、类型转换-自动或手动-导致索引失效" aria-hidden="true">#</a> <strong>1.4</strong> <strong>计算、函数、类型转换(自动或手动)导致索引失效</strong></h3><h3 id="_1-5-类型转换导致索引失效" tabindex="-1"><a class="header-anchor" href="#_1-5-类型转换导致索引失效" aria-hidden="true">#</a> <strong>1.5</strong> <strong>类型转换导致索引失效</strong></h3><h3 id="_1-6-范围条件右边的列索引失效" tabindex="-1"><a class="header-anchor" href="#_1-6-范围条件右边的列索引失效" aria-hidden="true">#</a> <strong>1.6</strong> <strong>范围条件右边的列索引失效</strong></h3><blockquote><p>应用开发中范围查询，例如：金额查询，日期查询往往都是范围查询。应将查询条件放置where语句最后。（创建的联合索引中，务必把范围涉及到的字段写在最后）</p></blockquote><h3 id="_1-7-不等于-或者-索引失效" tabindex="-1"><a class="header-anchor" href="#_1-7-不等于-或者-索引失效" aria-hidden="true">#</a> <strong>1.7</strong> <strong>不等于(!= 或者&lt;&gt;)索引失效</strong></h3><h3 id="_1-8-is-null可以使用索引-is-not-null无法使用索引" tabindex="-1"><a class="header-anchor" href="#_1-8-is-null可以使用索引-is-not-null无法使用索引" aria-hidden="true">#</a> <strong>1.8 is null可以使用索引，is not null无法使用索引</strong></h3><blockquote><p>结论：最好在设计数据表的时候就将<code>字段设置为 NOT NULL 约束</code> ，比如你可以将INT类型的字段，默认值设置为0。将字符类型的默认值设置为空字符串(&#39;&#39;)</p><p>拓展：同理，在查询中使用<code>not like</code>也无法使用索引，导致全表扫描</p></blockquote><h3 id="_1-9-like以通配符-开头索引失效" tabindex="-1"><a class="header-anchor" href="#_1-9-like以通配符-开头索引失效" aria-hidden="true">#</a> <strong>1.9 like以通配符%开头索引失效</strong></h3><blockquote><p>拓展：Alibaba《Java开发手册》</p><p>【强制】页面搜索严禁左模糊或者全模糊，如果需要请走搜索引擎来解决。</p></blockquote><h3 id="_1-10-or-前后存在非索引的列-索引失效" tabindex="-1"><a class="header-anchor" href="#_1-10-or-前后存在非索引的列-索引失效" aria-hidden="true">#</a> <strong>1.10 OR</strong> <strong>前后存在非索引的列，索引失效</strong></h3><p>在WHERE子句中，如果在OR前的条件列进行了索引，而在OR后的条件列没有进行索引，那么索引会失效。也就是说， <strong>OR前后的两个条件中的列都是索引时，查询中才使用索引。</strong></p><h3 id="_1-11-数据库和表的字符集统一使用utf8mb4" tabindex="-1"><a class="header-anchor" href="#_1-11-数据库和表的字符集统一使用utf8mb4" aria-hidden="true">#</a> <strong>1.11</strong> <strong>数据库和表的字符集统一使用utf8mb4</strong></h3><p>统一使用utf8mb4( 5.5.3版本以上支持)兼容性更好，统一字符集可以避免由于字符集转换产生的乱码。不同的<code>字符集</code> 进行比较前需要进行<code>转换</code>会造成索引失效。</p><h2 id="_2-关联查询优化" tabindex="-1"><a class="header-anchor" href="#_2-关联查询优化" aria-hidden="true">#</a> <strong>2.</strong> <strong>关联查询优化</strong></h2><blockquote><p>结论1：对于内连接来说，查询优化器可以决定谁来作为驱动表，谁作为被驱动表出现</p><p>结论2：对于内连接来讲，如果表的连接条件中只能有一个字段有索引，则有索引的字段所在的表会被作为被驱动表</p><p>结论3：对于内连接来说，在两个表的连接条件都存在索引的情况下，会选择小表作为驱动表。<code>小表驱动大表</code></p></blockquote><h3 id="_2-1-index-nested-loop-join-索引嵌套循环连接" tabindex="-1"><a class="header-anchor" href="#_2-1-index-nested-loop-join-索引嵌套循环连接" aria-hidden="true">#</a> 2.1 Index Nested-Loop Join（索引嵌套循环连接）</h3><p>Index Nested-Loop Join其优化的思路主要是为了<code>减少内层表数据的匹配次数</code>，所以要求被驱动表上必须<code>有索引</code>才行。</p><h3 id="_2-2-block-nested-loop-join-块嵌套循环连接" tabindex="-1"><a class="header-anchor" href="#_2-2-block-nested-loop-join-块嵌套循环连接" aria-hidden="true">#</a> 2.2 Block Nested-Loop Join（块嵌套循环连接）</h3><p>如果存在索引，那么会使用index的方式进行join，如果join的列没有索引，被驱动表要扫描的次数太多了。每次访问被驱动表，其表中的记录都会被加载到内存中，然后再从驱动表中取一条与其匹配，匹配结束后清除内存，然后再从驱动表中加载一条记录，然后把被驱动表的记录再加载到内存匹配，这样周而复始，大大增加了IO的次数。为了减少被驱动表的IO次数，就出现了Block Nested-Loop Join的方式。</p><p>不再是逐条获取驱动表的数据，而是一块一块的获取，引入了<code>join buffer缓冲区</code>，将驱动表join相关的部分数据列（大小受join buffer的限制）缓存到join buffer中，然后全表扫描被驱动表，被驱动表的每一条记录一次性和join buffer中的所有驱动表记录进行匹配（内存中操作），将简单嵌套循环中的多次比较合并成一次，降低了被驱动表的访问频率。</p><h3 id="_2-3-hash-join" tabindex="-1"><a class="header-anchor" href="#_2-3-hash-join" aria-hidden="true">#</a> 2.3 Hash Join</h3><p><strong>从MySQL的8.0.20版本开始将废弃BNLJ，因为从MySQL8.0.18版本开始就加入了hash join默认都会使用hash join</strong></p><ul><li>Nested Loop：对于被连接的数据子集较小的情况下，Nested Loop是个较好的选择。</li><li>Hash Join是做<code>大数据集连接</code>时的常用方式，优化器使用两个表中较小（相对较小）的表利用Join Key在内存中建立<code>散列值</code> ，然后扫描较大的表并探测散列值，找出与Hash表匹配的行。 <ul><li>这种方式适用于较小的表完全可以放入内存中的情况，这样总成本就是访问两个表的成本之和。</li><li>在表很大的情况下并不能完全放入内存，这时优化器会将它分割成<code>若干不同的分区</code> ，不能放入内存的部分就把该分区写入磁盘的临时段，此时要求有较大的临时段从而尽量提高I/O的性能。</li><li>它能够很好的工作于没有索引的大表和并行查询的环境中，并提供最好的性能。Hash Join只能应用于等值连接，这是由Hash的特点决定的。</li></ul></li></ul><h2 id="_3-子查询优化" tabindex="-1"><a class="header-anchor" href="#_3-子查询优化" aria-hidden="true">#</a> <strong>3.</strong> <strong>子查询优化</strong></h2><p><strong>子查询是 MySQL 的一项重要的功能，可以帮助我们通过一个 SQL 语句实现比较复杂的查询。但是，子查询的执行效率不高</strong>。原因：</p><p>① 执行子查询时，MySQL需要为内层查询语句的查询结果<code>建立一个临时表</code> ，然后外层查询语句从临时表中查询记录。查询完毕后，再<code>撤销这些临时表</code>。这样会消耗过多的CPU和IO资源，产生大量的慢查询。</p><p>② 子查询的结果集存储的临时表，不论是内存临时表还是磁盘临时表都<code>不会存在索引</code>，所以查询性能会受到一定的影响。</p><p>③ 对于返回结果集比较大的子查询，其对查询性能的影响也就越大。</p><p><strong>在MySQL中，可以使用连接（JOIN）查询来替代子查询</strong>。连接查询<code>不需要建立临时表</code>，其<code>速度比子查询要快</code>，如果查询中使用索引的话，性能就会更好。</p><div class="custom-container info"><p class="custom-container-title">结论</p><p>尽量不要使用NOT IN 或者 NOT EXISTS，用LEFT JOIN xxx ON xx WHERE xx IS NULL替代</p></div><h2 id="_4-排序优化" tabindex="-1"><a class="header-anchor" href="#_4-排序优化" aria-hidden="true">#</a> <strong>4.</strong> <strong>排序优化</strong></h2><ol><li><p>SQL 中，可以在 WHERE 子句和 ORDER BY 子句中使用索引，目的是在 WHERE 子句中 <code>避免全表扫描</code>，在 ORDER BY 子句<code>避免使用 FileSort 排序</code>。当然，某些情况下全表扫描，或者 FileSort 排序不一定比索引慢。但总的来说，我们还是要避免，以提高查询效率。</p></li><li><p>尽量使用 Index 完成 ORDER BY 排序。如果 WHERE 和 ORDER BY 后面是相同的列就使用单索引列；如果不同就使用联合索引。</p></li><li><p>无法使用 Index 时，需要对 FileSort 方式进行调优。</p></li></ol><h2 id="_5-group-by优化" tabindex="-1"><a class="header-anchor" href="#_5-group-by优化" aria-hidden="true">#</a> <strong>5. GROUP BY优化</strong></h2><ul><li>group by 使用索引的原则几乎跟order by一致 ，group by 即使没有过滤条件用到索引，也可以直接使用索引。</li><li>group by 先排序再分组，遵照索引建的最佳左前缀法则</li><li>当无法使用索引列，可以增大<code>max_length_for_sort_data</code>和<code>sort_buffer_size</code>参数的设置</li><li>where效率高于having，能写在where限定的条件就不要写在having中了</li><li>减少使用order by，和业务沟通能不排序就不排序，或将排序放到程序端去做。Order by、group by、distinct这些语句较为耗费CPU，数据库的CPU资源是极其宝贵的。</li><li>包含了order by、group by、distinct这些查询的语句，where条件过滤出来的结果集请保持在1000行以内，否则SQL会很慢。</li></ul><h2 id="_6-优化分页查询" tabindex="-1"><a class="header-anchor" href="#_6-优化分页查询" aria-hidden="true">#</a> <strong>6.</strong> <strong>优化分页查询</strong></h2><p><strong>优化思路一</strong></p><p>在索引上完成排序分页操作，最后根据主键关联回原表查询所需要的其他列内容。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student t<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> id <span class="token keyword">FROM</span> student <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> id <span class="token keyword">LIMIT</span> <span class="token number">2000000</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span> a
<span class="token keyword">WHERE</span> t<span class="token punctuation">.</span>id <span class="token operator">=</span> a<span class="token punctuation">.</span>id<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>优化思路二</strong></p><p>该方案适用于主键自增的表，可以把Limit 查询转换成某个位置的查询。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student <span class="token keyword">WHERE</span> id <span class="token operator">&gt;</span> <span class="token number">2000000</span> <span class="token keyword">LIMIT</span> <span class="token number">10</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_7-优先考虑覆盖索引" tabindex="-1"><a class="header-anchor" href="#_7-优先考虑覆盖索引" aria-hidden="true">#</a> <strong>7.</strong> <strong>优先考虑覆盖索引</strong></h2><h3 id="_7-1-什么是覆盖索引" tabindex="-1"><a class="header-anchor" href="#_7-1-什么是覆盖索引" aria-hidden="true">#</a> <strong>7.1</strong> <strong>什么是覆盖索引？</strong></h3><p><strong>理解方式一</strong>：索引是高效找到行的一个方法，但是一般数据库也能使用索引找到一个列的数据，因此它不必读取整个行。毕竟索引叶子节点存储了它们索引的数据；当能通过读取索引就可以得到想要的数据，那就不需要读取行了。 <strong>一个索引包含了满足查询结果的数据就叫做覆盖索引。</strong></p><p><strong>理解方式二</strong>：非聚簇复合索引的一种形式，它包括在查询里的SELECT、JOIN和WHERE子句用到的所有列（即建索引的字段正好是覆盖查询条件中所涉及的字段）。</p><p>简单说就是，<code>索引列+主键</code>包含<code>SELECT 到 FROM之间查询的列</code>。</p><h3 id="_7-2-覆盖索引的利弊" tabindex="-1"><a class="header-anchor" href="#_7-2-覆盖索引的利弊" aria-hidden="true">#</a> <strong>7.2</strong> <strong>覆盖索引的利弊</strong></h3><p><strong>好处：</strong></p><p><strong>1.</strong> <strong>避免Innodb表进行索引的二次查询（回表）</strong></p><p><strong>2.</strong> <strong>可以把随机IO变成顺序IO加快查询效率</strong></p><p><strong>弊端：</strong></p><p><code>索引字段的维护</code>总是有代价的。因此，在建立冗余索引来支持覆盖索引时就需要权衡考虑了。这是业务DBA，或者称为业务数据架构师的工作。</p><h2 id="_8-索引条件下推" tabindex="-1"><a class="header-anchor" href="#_8-索引条件下推" aria-hidden="true">#</a> <strong>8.</strong> <strong>索引条件下推</strong></h2><h3 id="_8-1-使用前后的扫描过程" tabindex="-1"><a class="header-anchor" href="#_8-1-使用前后的扫描过程" aria-hidden="true">#</a> <strong>8.1</strong> <strong>使用前后的扫描过程</strong></h3><p><strong>在不使用ICP索引扫描的过程：</strong></p><p>storage层：只将满足index key条件的索引记录对应的整行记录取出，返回给server层</p><p>server 层：对返回的数据，使用后面的where条件过滤，直至返回最后一行。</p><p><strong>使用ICP扫描的过程：</strong></p><p>storage层：首先将index key条件满足的索引记录区间确定，然后在索引上使用index filter进行过滤。将满足的index filter条件的索引记录才去回表取出整行记录返回server层。不满足index filter条件的索引记录丢弃，不回表、也不会返回server层。</p><p>server 层：对返回的数据，使用table filter条件做最后的过滤。</p><h2 id="_9-其它查询优化策略" tabindex="-1"><a class="header-anchor" href="#_9-其它查询优化策略" aria-hidden="true">#</a> <strong>9.</strong> <strong>其它查询优化策略</strong></h2><h3 id="_9-1-exists-和-in-的区分" tabindex="-1"><a class="header-anchor" href="#_9-1-exists-和-in-的区分" aria-hidden="true">#</a> <strong>9.1 EXISTS</strong> <strong>和</strong> <strong>IN</strong> <strong>的区分</strong></h3><p>索引是个前提，其实选择与否还会要看表的大小。你可以将选择的标准理解为<code>小表驱动大表</code>。</p><h3 id="_9-2-count-与count-具体字段-效率" tabindex="-1"><a class="header-anchor" href="#_9-2-count-与count-具体字段-效率" aria-hidden="true">#</a> <strong>9.2 COUNT(*)与COUNT(具体字段)效率</strong></h3><p><strong>环节1：</strong><code>COUNT(*)</code>和<code>COUNT(1)</code>都是对所有结果进行<code>COUNT</code>，<code>COUNT(*)</code>和<code>COUNT(1)</code> 本质上并没有区别（二者执行时间可能略有差别，不过你还是可以把它俩的执行效率看成是相等的）。如果有WHERE子句，则是对所有符合筛选条件的数据行进行统计；如果没有WHERE子句，则是对数据表的数据行数进行统计。</p><p><strong>环节2</strong>：如果是MyISAM存储引擎，统计数据表的行数只需要<code>O(1)</code> 的复杂度，这是因为每张MyISAM的数据表都有一个meta信息存储了<code>row_count</code>值，而一致性则是由表级锁来保证的。</p><p>如果是InnoDB存储引擎，因为InnoDB支持事务，采用行级锁和MVCC机制，所以无法像MyISAM一样，维护一个row_count变量，因此需要采用<code>扫描全表</code> ，是<code>O(n)</code>的复杂度，进行循环+计数的方式来完成统计。</p><p><strong>环节3</strong>：在InnoDB引擎中，如果采用<code>COUNT(具体字段)</code> 来统计数据行数，要尽量采用二级索引。因为主键采用的索引是聚簇索引，聚簇索引包含的信息多，明显会大于二级索引（非聚簇索引）。对于<code>COUNT(*)</code> 和<code>COUNT(1)</code>来说，它们不需要查找具体的行，只是统计行数，系统会<code>自动</code>采用占用空间更小的二级索引来进行统计。</p><p>如果有多个二级索引，会使用key_len小的二级索引进行扫描。当没有二级索引的时候，才会采用主键索引来进行统计。</p><h3 id="_9-3-关于select" tabindex="-1"><a class="header-anchor" href="#_9-3-关于select" aria-hidden="true">#</a> <strong>9.3</strong> <strong>关于SELECT(*)</strong></h3><p>在表查询中，建议明确字段，不要使用 * 作为查询的字段列表，推荐使用SELECT &lt;字段列表&gt; 查询。原因：</p><p>① MySQL 在解析的过程中，会通过<code>查询数据字典</code>将&quot;*&quot;按序转换成所有列名，这会大大的耗费资源和时间。</p><p>② 无法使用<code>覆盖索引</code></p><h3 id="_9-4-limit-1-对优化的影响" tabindex="-1"><a class="header-anchor" href="#_9-4-limit-1-对优化的影响" aria-hidden="true">#</a> <strong>9.4 LIMIT 1</strong> <strong>对优化的影响</strong></h3><p>针对的是会扫描全表的 SQL 语句，如果你可以确定结果集只有一条，那么加上<code>LIMIT 1</code>的时候，当找到一条结果的时候就不会继续扫描了，这样会加快查询速度。</p><p>如果数据表已经对字段建立了唯一索引，那么可以通过索引进行查询，不会全表扫描的话，就不需要加上<code>LIMIT 1</code>了。</p><h3 id="_9-5-多使用commit" tabindex="-1"><a class="header-anchor" href="#_9-5-多使用commit" aria-hidden="true">#</a> <strong>9.5</strong> <strong>多使用COMMIT</strong></h3><p>只要有可能，在程序中尽量多使用 COMMIT，这样程序的性能得到提高，需求也会因为 COMMIT 所释放的资源而减少。</p><p>COMMIT 所释放的资源：</p><ul><li><p>回滚段上用于恢复数据的信息</p></li><li><p>被程序语句获得的锁</p></li><li><p>redo / undo log buffer 中的空间</p></li><li><p>管理上述 3 种资源中的内部花费</p></li></ul>`,92),t=[r];function d(i,c){return o(),n("div",null,t)}const l=e(a,[["render",d],["__file","optimize.html.vue"]]);export{l as default};
