import{_ as a}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as e,c as n,e as s}from"./app.1eef2ec7.js";const i={},l=s(`<h1 id="创建多线程的两种方式" tabindex="-1"><a class="header-anchor" href="#创建多线程的两种方式" aria-hidden="true">#</a> 创建多线程的两种方式</h1><h2 id="继承thread类的方式" tabindex="-1"><a class="header-anchor" href="#继承thread类的方式" aria-hidden="true">#</a> 继承Thread类的方式</h2><ol><li>创建一个继承于Thread类的子类</li><li>重写Thread类的run() --&gt; 将此线程执行的操作声明在run()中</li><li>创建Thread类的子类的对象</li><li>通过此对象调用start()： <ul><li>启动当前线程</li><li>调用当前线程的run()</li></ul></li></ol><div class="custom-container tip"><p class="custom-container-title">两个问题</p><p>问题一：我们启动一个线程，必须调用start()，不能调用run()的方式启动线程。</p><p>问题二：如果再启动一个线程，必须重新创建一个Thread子类的对象，调用此对象的start().</p></div><h2 id="实现runnable接口的方式" tabindex="-1"><a class="header-anchor" href="#实现runnable接口的方式" aria-hidden="true">#</a> 实现Runnable接口的方式</h2><ol><li>创建一个实现了Runnable接口的类</li><li>实现类去实现Runnable中的抽象方法：run()</li><li>创建实现类的对象</li><li>将此对象作为参数传递到Thread类的构造器中，创建Thread类的对象</li><li>通过Thread类的对象调用start()</li></ol><h2 id="两种方式的对比" tabindex="-1"><a class="header-anchor" href="#两种方式的对比" aria-hidden="true">#</a> 两种方式的对比</h2><p><strong>开发中优先选择：实现Runnable接口的方式</strong></p><div class="custom-container info"><p class="custom-container-title">原因</p><ol><li>实现的方式没类的单继承性的局限性</li><li>实现的方式更适合来处理多个线程共享数据的情况。</li></ol></div><div class="custom-container info"><p class="custom-container-title">联系</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Thread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></div><div class="custom-container tip"><p class="custom-container-title">相同点</p><p>两种方式都需要重写run(),将线程要执行的逻辑声明在run()中。</p><p>目前两种方式，要想启动线程，都是调用的Thread类中的start()。</p></div>`,11),r=[l];function t(c,d){return e(),n("div",null,r)}const u=a(i,[["render",t],["__file","thread.html.vue"]]);export{u as default};
