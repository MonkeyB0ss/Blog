import{_ as s}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as n,c as a,e}from"./app.8925ff20.js";const o="/Blog/assets/other-log1.9b4914aa.png",t="/Blog/assets/other-log2.ce404f22.png",l="/Blog/assets/other-log3.33d82b5a.png",i="/Blog/assets/other-log4.2c038a99.png",r="/Blog/assets/other-log5.819f26f8.png",p="/Blog/assets/other-log6.e2784e11.png",c={},d=e(`<h1 id="第17章-其它数据库日志" tabindex="-1"><a class="header-anchor" href="#第17章-其它数据库日志" aria-hidden="true">#</a> 第17章_其它数据库日志</h1><h2 id="_1-mysql支持的日志" tabindex="-1"><a class="header-anchor" href="#_1-mysql支持的日志" aria-hidden="true">#</a> <strong>1. MySQL支持的日志</strong></h2><h3 id="_1-1-日志类型" tabindex="-1"><a class="header-anchor" href="#_1-1-日志类型" aria-hidden="true">#</a> <strong>1.1</strong> <strong>日志类型</strong></h3><p>MySQL有不同类型的日志文件，用来存储不同类型的日志，分为<code>二进制日志</code>、<code>错误日志</code>、<code>通用查询日志</code>和<code>慢查询日志</code>，这也是常用的4种。MySQL 8又新增两种支持的日志：<code>中继日志</code>和<code>数据定义语句日志</code>。使用这些日志文件，可以查看MySQL内部发生的事情。</p><ul><li><p><strong>慢查询日志</strong>：记录所有执行时间超过long_query_time的所有查询，方便我们对查询进行优化。</p></li><li><p><strong>通用查询日志</strong>：记录所有连接的起始时间和终止时间，以及连接发送给数据库服务器的所有指令，对我们复原操作的实际场景、发现问题，甚至是对数据库操作的审计都有很大的帮助。</p></li><li><p><strong>错误日志</strong>：记录MySQL服务的启动、运行或停止MySQL服务时出现的问题，方便我们了解服务器的状态，从而对服务器进行维护。</p></li><li><p><strong>二进制日志</strong>：记录所有更改数据的语句，可以用于主从服务器之间的数据同步，以及服务器遇到故障时数据的无损失恢复。</p></li><li><p><strong>中继日志</strong>：用于主从服务器架构中，从服务器用来存放主服务器二进制日志内容的一个中间文件。从服务器通过读取中继日志的内容，来同步主服务器上的操作。</p></li><li><p><strong>数据定义语句日志</strong>：记录数据定义语句执行的元数据操作。</p></li></ul><p>除二进制日志外，其他日志都是<code>文本文件</code>。默认情况下，所有日志创建于<code>MySQL数据目录</code>中。</p><h3 id="_1-2-日志的弊端" tabindex="-1"><a class="header-anchor" href="#_1-2-日志的弊端" aria-hidden="true">#</a> <strong>1.2</strong> <strong>日志的弊端</strong></h3><ul><li><p>日志功能会<code>降低MySQL数据库的性能</code>。</p></li><li><p>日志会<code>占用大量的磁盘空间</code>。</p></li></ul><h2 id="_2-通用查询日志-general-query-log" tabindex="-1"><a class="header-anchor" href="#_2-通用查询日志-general-query-log" aria-hidden="true">#</a> <strong>2.</strong> <strong>通用查询日志(general query log)</strong></h2><p>通用查询日志用来<code>记录用户的所有操作</code>，包括启动和关闭MySQL服务、所有用户的连接开始时间和截止时间、发给 MySQL 数据库服务器的所有 SQL 指令等。当我们的数据发生异常时，<strong>查看通用查询日志，还原操作时的具体场景</strong>，可以帮助我们准确定位问题。</p><h3 id="_2-1-查看当前状态" tabindex="-1"><a class="header-anchor" href="#_2-1-查看当前状态" aria-hidden="true">#</a> <strong>2.1</strong> <strong>查看当前状态</strong></h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">SHOW</span> VARIABLES <span class="token operator">LIKE</span> <span class="token string">&#39;%general%&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2-2-启动日志" tabindex="-1"><a class="header-anchor" href="#_2-2-启动日志" aria-hidden="true">#</a> <strong>2.2</strong> <strong>启动日志</strong></h3><p><strong>方式1：永久性方式</strong></p><div class="language-ini line-numbers-mode" data-ext="ini"><pre class="language-ini"><code><span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">mysqld</span><span class="token punctuation">]</span></span> 
<span class="token key attr-name">general_log</span><span class="token punctuation">=</span><span class="token value attr-value">ON</span> 
<span class="token key attr-name">general_log_file</span><span class="token punctuation">=</span><span class="token value attr-value">[path[filename]] #日志文件所在目录路径，filename为日志文件名</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>方式2：临时性方式</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SET</span> <span class="token keyword">GLOBAL</span> general_log<span class="token operator">=</span><span class="token keyword">on</span><span class="token punctuation">;</span> <span class="token comment"># 开启通用查询日志</span>
<span class="token keyword">SET</span> <span class="token keyword">GLOBAL</span> general_log_file<span class="token operator">=</span><span class="token string">&#39;path/filename&#39;</span><span class="token punctuation">;</span> <span class="token comment"># 设置日志文件保存位置</span>
<span class="token keyword">SET</span> <span class="token keyword">GLOBAL</span> general_log<span class="token operator">=</span><span class="token keyword">off</span><span class="token punctuation">;</span> <span class="token comment"># 关闭通用查询日志</span>
<span class="token keyword">SHOW</span> VARIABLES <span class="token operator">LIKE</span> <span class="token string">&#39;general_log%&#39;</span><span class="token punctuation">;</span> <span class="token comment"># 查看设置后情况</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-3-停止日志" tabindex="-1"><a class="header-anchor" href="#_2-3-停止日志" aria-hidden="true">#</a> <strong>2.3</strong> <strong>停止日志</strong></h3><p><strong>方式1：永久性方式</strong></p><div class="language-ini line-numbers-mode" data-ext="ini"><pre class="language-ini"><code><span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">mysqld</span><span class="token punctuation">]</span></span> 
<span class="token key attr-name">general_log</span><span class="token punctuation">=</span><span class="token value attr-value">OFF</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>方式2：临时性方式</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SET</span> <span class="token keyword">GLOBAL</span> general_log<span class="token operator">=</span><span class="token keyword">off</span><span class="token punctuation">;</span>
<span class="token keyword">SHOW</span> VARIABLES <span class="token operator">LIKE</span> <span class="token string">&#39;general_log%&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-错误日志-error-log" tabindex="-1"><a class="header-anchor" href="#_3-错误日志-error-log" aria-hidden="true">#</a> <strong>3.错误日志(error log)</strong></h2><h3 id="_3-1-启动日志" tabindex="-1"><a class="header-anchor" href="#_3-1-启动日志" aria-hidden="true">#</a> <strong>3.1</strong> <strong>启动日志</strong></h3><p>在MySQL数据库中，错误日志功能是<code>默认开启</code>的。而且，错误日志<code>无法被禁止</code>。</p><div class="language-ini line-numbers-mode" data-ext="ini"><pre class="language-ini"><code><span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">mysqld</span><span class="token punctuation">]</span></span> 
<span class="token key attr-name">log-error</span><span class="token punctuation">=</span><span class="token value attr-value">[path/[filename]] #path为日志文件所在的目录路径，filename为日志文件名</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-查看日志" tabindex="-1"><a class="header-anchor" href="#_3-2-查看日志" aria-hidden="true">#</a> <strong>3.2</strong> <strong>查看日志</strong></h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">SHOW</span> VARIABLES <span class="token operator">LIKE</span> <span class="token string">&#39;log_err%&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_3-3-删除-刷新日志" tabindex="-1"><a class="header-anchor" href="#_3-3-删除-刷新日志" aria-hidden="true">#</a> <strong>3.3</strong> <strong>删除\\刷新日志</strong></h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">install</span> <span class="token parameter variable">-omysql</span> <span class="token parameter variable">-gmysql</span> <span class="token parameter variable">-m0644</span> /dev/null /var/log/mysqld.log
mysqladmin <span class="token parameter variable">-uroot</span> <span class="token parameter variable">-p</span> flush-logs
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-二进制日志-bin-log" tabindex="-1"><a class="header-anchor" href="#_4-二进制日志-bin-log" aria-hidden="true">#</a> <strong>4.</strong> <strong>二进制日志(bin log)</strong></h2><h3 id="_4-1-查看默认情况" tabindex="-1"><a class="header-anchor" href="#_4-1-查看默认情况" aria-hidden="true">#</a> <strong>4.1</strong> <strong>查看默认情况</strong></h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">&#39;%log_bin%&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_4-2-日志参数设置" tabindex="-1"><a class="header-anchor" href="#_4-2-日志参数设置" aria-hidden="true">#</a> <strong>4.2</strong> <strong>日志参数设置</strong></h3><p><strong>方式1：永久性方式</strong></p><div class="language-ini line-numbers-mode" data-ext="ini"><pre class="language-ini"><code><span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">mysqld</span><span class="token punctuation">]</span></span> 
<span class="token comment">#启用二进制日志 </span>
<span class="token key attr-name">log-bin</span><span class="token punctuation">=</span><span class="token value attr-value">atguigu-bin</span> 
<span class="token key attr-name">binlog_expire_logs_seconds</span><span class="token punctuation">=</span><span class="token value attr-value">600 max_binlog_size=100M</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>设置带文件夹的bin-log日志存放目录</strong></p><div class="language-ini line-numbers-mode" data-ext="ini"><pre class="language-ini"><code><span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">mysqld</span><span class="token punctuation">]</span></span> 
<span class="token key attr-name">log-bin</span><span class="token punctuation">=</span><span class="token value attr-value">&quot;<span class="token inner-value">/var/lib/mysql/binlog/atguigu-bin</span>&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：新建的文件夹需要使用mysql用户，使用下面的命令即可。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">chown</span> <span class="token parameter variable">-R</span> <span class="token parameter variable">-v</span> mysql:mysql binlog
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>方式2：临时性方式</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># global 级别 </span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">set</span> <span class="token keyword">global</span> sql_log_bin<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> 
ERROR <span class="token number">1228</span> <span class="token punctuation">(</span>HY000<span class="token punctuation">)</span>: Variable <span class="token string">&#39;sql_log_bin&#39;</span> <span class="token operator">is</span> a <span class="token keyword">SESSION</span> variable <span class="token operator">and</span> can<span class="token punctuation">\`</span>t be used <span class="token keyword">with</span> <span class="token keyword">SET</span> <span class="token keyword">GLOBAL</span> 

<span class="token comment"># session级别 </span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">SET</span> sql_log_bin<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> 
Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.01</span> 秒<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-3-查看日志" tabindex="-1"><a class="header-anchor" href="#_4-3-查看日志" aria-hidden="true">#</a> <strong>4.3</strong> <strong>查看日志</strong></h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>mysqlbinlog <span class="token operator">-</span>v <span class="token string">&quot;/var/lib/mysql/binlog/atguigu-bin.000002&quot;</span>
<span class="token comment"># 不显示binlog格式的语句</span>
mysqlbinlog <span class="token operator">-</span>v <span class="token comment">--base64-output=DECODE-ROWS &quot;/var/lib/mysql/binlog/atguigu-bin.000002&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 可查看参数帮助 </span>
mysqlbinlog <span class="token comment">--no-defaults --help </span>

<span class="token comment"># 查看最后100行 </span>
mysqlbinlog <span class="token comment">--no-defaults --base64-output=decode-rows -vv atguigu-bin.000002 |tail -100 </span>

<span class="token comment"># 根据position查找 </span>
mysqlbinlog <span class="token comment">--no-defaults --base64-output=decode-rows -vv atguigu-bin.000002 |grep -A20 &#39;4939002&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面这种办法读取出binlog日志的全文内容比较多，不容易分辨查看到pos点信息，下面介绍一种更为方便的查询命令：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">show</span> binlog events <span class="token punctuation">[</span><span class="token operator">IN</span> <span class="token string">&#39;log_name&#39;</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token keyword">FROM</span> pos<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token keyword">LIMIT</span> <span class="token punctuation">[</span><span class="token keyword">offset</span><span class="token punctuation">,</span><span class="token punctuation">]</span> row_count<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><code>IN &#39;log_name&#39;</code>：指定要查询的binlog文件名（不指定就是第一个binlog文件）- <code>FROM pos</code>：指定从哪个pos起始点开始查起（不指定就是从整个文件首个pos点开始算）</li><li><code>LIMIT [offset]</code>：偏移量(不指定就是0)</li><li><code>row_count</code>:查询总条数（不指定就是所有行）</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">show</span> binlog events <span class="token operator">in</span> <span class="token string">&#39;atguigu-bin.000002&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_4-4-使用日志恢复数据" tabindex="-1"><a class="header-anchor" href="#_4-4-使用日志恢复数据" aria-hidden="true">#</a> <strong>4.4</strong> <strong>使用日志恢复数据</strong></h3><p>mysqlbinlog恢复数据的语法如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>mysqlbinlog <span class="token punctuation">[</span>option<span class="token punctuation">]</span> filename<span class="token operator">|</span>mysql –uuser -ppass<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><code>filename</code>：是日志文件名。</li><li><code>option</code>：可选项，比较重要的两对option参数是--start-date、--stop-date 和 --start-position、-- stop-position。 <ul><li><code>--start-date 和 --stop-date</code>：可以指定恢复数据库的起始时间点和结束时间点。</li><li><code>--start-position和--stop-position</code>：可以指定恢复数据的开始位置和结束位置。</li></ul></li></ul><blockquote><p>注意：使用mysqlbinlog命令进行恢复操作时，必须是编号小的先恢复，例如atguigu-bin.000001必须在atguigu-bin.000002之前恢复。</p></blockquote><h3 id="_4-5-删除二进制日志" tabindex="-1"><a class="header-anchor" href="#_4-5-删除二进制日志" aria-hidden="true">#</a> <strong>4.5</strong> <strong>删除二进制日志</strong></h3><p><strong>1. PURGE MASTER LOGS：删除指定日志文件</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">PURGE</span> {MASTER <span class="token operator">|</span> <span class="token keyword">BINARY</span>} LOGS <span class="token keyword">TO</span> <span class="token string">&#39;指定日志文件名&#39;</span> 
<span class="token keyword">PURGE</span> {MASTER <span class="token operator">|</span> <span class="token keyword">BINARY</span>} LOGS BEFORE <span class="token string">&#39;指定日期&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-再谈二进制日志-binlog" tabindex="-1"><a class="header-anchor" href="#_5-再谈二进制日志-binlog" aria-hidden="true">#</a> <strong>5.</strong> <strong>再谈二进制日志(binlog)</strong></h2><h3 id="_5-1-写入机制" tabindex="-1"><a class="header-anchor" href="#_5-1-写入机制" aria-hidden="true">#</a> <strong>5.1</strong> <strong>写入机制</strong></h3><p>binlog的写入时机也非常简单，事务执行过程中，先把日志写到<code>binlog cache</code>，事务提交的时候，再把binlog cache写到binlog文件中。因为一个事务的binlog不能被拆开，无论这个事务多大，也要确保一次性写入，所以系统会给每个线程分配一个块内存作为binlog cache。</p><p><img src="`+o+'" alt="image-20220405163025361"></p><p>write和fsync的时机，可以由参数<code>sync_binlog</code>控制，默认是 <code>0</code>。为0的时候，表示每次提交事务都只write，由系统自行判断什么时候执行fsync。虽然性能得到提升，但是机器宕机，page cache里面的binglog 会丢失。如下图：</p><p><img src="'+t+'" alt="image-20220405163125180"></p><p>为了安全起见，可以设置为<code>1</code>，表示每次提交事务都会执行fsync，就如同<strong>redo log</strong> <strong>刷盘流程</strong> 一样。最后还有一种折中方式，可以设置为N(N&gt;1)，表示每次提交事务都write，但累积N个事务后才fsync。</p><p><img src="'+l+'" alt="image-20220405163205364"></p><p>在出现IO瓶颈的场景里，将sync_binlog设置成一个比较大的值，可以提升性能。同样的，如果机器宕机，会丢失最近N个事务的binlog日志。</p><h3 id="_5-2-binlog与redolog对比" tabindex="-1"><a class="header-anchor" href="#_5-2-binlog与redolog对比" aria-hidden="true">#</a> <strong>5.2 binlog与redolog对比</strong></h3><ul><li>redo log 它是<code>物理日志</code>，记录内容是&quot;在某个数据页上做了什么修改&quot;，属于 InnoDB 存储引擎层产生的。</li><li>而 binlog 是<code>逻辑日志</code>，记录内容是语句的原始逻辑，类似于&quot;给 ID=2 这一行的 c 字段加 1&quot;，属于MySQL Server 层。</li><li>虽然它们都属于持久化的保证，但是侧重点不同。 <ul><li>redo log 让InnoDB存储引擎拥有了崩溃恢复能力。</li><li>binlog保证了MySQL集群架构的数据一致性</li></ul></li></ul><h3 id="_5-3-两阶段提交" tabindex="-1"><a class="header-anchor" href="#_5-3-两阶段提交" aria-hidden="true">#</a> <strong>5.3</strong> <strong>两阶段提交</strong></h3><p>在执行更新语句过程，会记录redo log与binlog两块日志，以基本的事务为单位，redo log在事务执行过程中可以不断写入，而binlog只有在提交事务时才写入，所以redo log与binlog的<code>写入时机</code>不一样。</p><p>为了解决两份日志之间的逻辑一致问题，InnoDB存储引擎使用<strong>两阶段提交</strong>方案。</p><p><img src="'+i+'" alt="image-20220405163716222"></p><p>使用<strong>两阶段提交</strong>后，写入binlog时发生异常也不会有影响</p><p><img src="'+r+'" alt="image-20220405163902977"></p><p>另一个场景，redo log设置commit阶段发生异常，那会不会回滚事务呢？</p><p><img src="'+p+'" alt="image-20220405163927129"></p><p>并不会回滚事务，它会执行上图框住的逻辑，虽然redo log是处于prepare阶段，但是能通过事务id找到对应的binlog日志，所以MySQL认为是完整的，就会提交事务恢复数据。</p><h2 id="_6-中继日志-relay-log" tabindex="-1"><a class="header-anchor" href="#_6-中继日志-relay-log" aria-hidden="true">#</a> <strong>6.</strong> <strong>中继日志(relay log)</strong></h2><h3 id="_6-1-介绍" tabindex="-1"><a class="header-anchor" href="#_6-1-介绍" aria-hidden="true">#</a> <strong>6.1</strong> <strong>介绍</strong></h3><p><strong>中继日志只在主从服务器架构的从服务器上存在</strong> 。从服务器为了与主服务器保持一致，要从主服务器读取二进制日志的内容，并且把读取到的信息写入<code>本地的日志文件</code> 中，这个从服务器本地的日志文件就叫<code>中继日志</code> 。然后，从服务器读取中继日志，并根据中继日志的内容对从服务器的数据进行更新，完成主从服务器的<code>数据同步</code>。</p><h3 id="_6-2-恢复的典型错误" tabindex="-1"><a class="header-anchor" href="#_6-2-恢复的典型错误" aria-hidden="true">#</a> <strong>6.2</strong> <strong>恢复的典型错误</strong></h3><p>如果从服务器宕机，有的时候为了系统恢复，要重装操作系统，这样就可能会导致你的<code>服务器名称</code>与之前<code>不同</code> 。而中继日志里是<code>包含从服务器名</code>的。在这种情况下，就可能导致你恢复从服务器的时候，无法从宕机前的中继日志里读取数据，以为是日志文件损坏了，其实是名称不对了。</p><p>解决的方法也很简单，把从服务器的名称改回之前的名称。</p>',83),g=[d];function u(m,k){return n(),a("div",null,g)}const h=s(c,[["render",u],["__file","other-log.html.vue"]]);export{h as default};
