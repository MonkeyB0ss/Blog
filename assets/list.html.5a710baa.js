import{_ as n}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as s,c as a,e}from"./app.1ee10b43.js";const t={},i=e(`<h1 id="collection子接口-list接口" tabindex="-1"><a class="header-anchor" href="#collection子接口-list接口" aria-hidden="true">#</a> Collection子接口：List接口</h1><h2 id="存储的数据特点" tabindex="-1"><a class="header-anchor" href="#存储的数据特点" aria-hidden="true">#</a> 存储的数据特点</h2><p>存储序的、可重复的数据。</p><h2 id="常用方法💡" tabindex="-1"><a class="header-anchor" href="#常用方法💡" aria-hidden="true">#</a> 常用方法💡</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>增：<span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span>
删：<span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span>
改：<span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token class-name">Object</span> ele<span class="token punctuation">)</span>
查：<span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span>
插：<span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token class-name">Object</span> ele<span class="token punctuation">)</span>
长度：<span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
遍历：
① <span class="token class-name">Iterator</span>迭代器方式
② 增强<span class="token keyword">for</span>循环
③ 普通的循环
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="常用实现类" tabindex="-1"><a class="header-anchor" href="#常用实现类" aria-hidden="true">#</a> 常用实现类</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>|----Collection接口：单列集合，用来存储一个一个的对象
	|----List接口：存储序的、可重复的数据。  --&gt;“动态”数组,替换原的数组
		|----ArrayList：作为List接口的主要实现类；线程不安全的，效率高；底层使用Object[] elementData存储
		|----LinkedList：对于频繁的插入、删除操作，使用此类效率比ArrayList高；底层使用双向链表存储
		|----Vector：作为List接口的古老实现类；线程安全的，效率低；底层使用Object[] elementData存储
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="源码分析🔔" tabindex="-1"><a class="header-anchor" href="#源码分析🔔" aria-hidden="true">#</a> 源码分析🔔</h2><h3 id="arraylist的源码分析" tabindex="-1"><a class="header-anchor" href="#arraylist的源码分析" aria-hidden="true">#</a> ArrayList的源码分析</h3><h4 id="jdk-7情况下" tabindex="-1"><a class="header-anchor" href="#jdk-7情况下" aria-hidden="true">#</a> jdk 7情况下</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 底层创建了长度是10的Object[]数组elementData</span>
<span class="token class-name">ArrayList</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// elementData[0] = new Integer(123);</span>
list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token comment">// 如果此次的添加导致底层elementData数组容量不够，则扩容。</span>
list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="highlight-lines"><div class="highlight-line"> </div><br><div class="highlight-line"> </div><br><br><div class="highlight-line"> </div><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">提示</p><p>默认情况下，扩容为原来的容量的1.5倍，同时需要将原有数组中的数据复制到新的数组中。</p></div><div class="custom-container info"><p class="custom-container-title">结论</p><p>建议开发中使用带参的构造器：ArrayList list = new ArrayList(int capacity)</p></div><h4 id="jdk-8中arraylist的变化" tabindex="-1"><a class="header-anchor" href="#jdk-8中arraylist的变化" aria-hidden="true">#</a> jdk 8中ArrayList的变化</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 底层Object[] elementData初始化为{}.并没创建长度为10的数组</span>
<span class="token class-name">ArrayList</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 第一次调用add()时，底层才创建了长度10的数组，并将数据123添加到elementData[0]</span>
list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="highlight-lines"><div class="highlight-line"> </div><br><div class="highlight-line"> </div><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">提示</p><p>后续的添加和扩容操作与jdk 7 无异。</p></div><h4 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h4><p>jdk7中的ArrayList的对象的创建类似于单例的饿汉式，而jdk8中的ArrayList的对象的创建类似于单例的懒汉式，延迟了数组的创建，节省内存。</p><h3 id="linkedlist的源码分析" tabindex="-1"><a class="header-anchor" href="#linkedlist的源码分析" aria-hidden="true">#</a> LinkedList的源码分析</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 内部声明了Node类型的first和last属性，默认值为null</span>
<span class="token class-name">LinkedList</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 将123封装到Node中，创建了Node对象。</span>
list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 其中，Node定义为：体现了LinkedList的双向链表的说法</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
   <span class="token class-name">E</span> item<span class="token punctuation">;</span>
   <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> next<span class="token punctuation">;</span>
   <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> prev<span class="token punctuation">;</span>
   
   <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> prev<span class="token punctuation">,</span> <span class="token class-name">E</span> element<span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>item <span class="token operator">=</span> element<span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>prev <span class="token operator">=</span> prev<span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><div class="highlight-line"> </div><br><div class="highlight-line"> </div><br><br><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="vector的源码分析" tabindex="-1"><a class="header-anchor" href="#vector的源码分析" aria-hidden="true">#</a> Vector的源码分析</h3><ol><li>jdk7和jdk8中通过Vector()构造器创建对象时，底层都创建了长度为10的数组。</li><li>在扩容方面，默认扩容为原来的数组长度的2倍。</li></ol><h2 id="存储的元素的要求" tabindex="-1"><a class="header-anchor" href="#存储的元素的要求" aria-hidden="true">#</a> 存储的元素的要求</h2><p>添加的对象，所在的类要重写equals()方法</p>`,24),c=[i];function p(l,o){return s(),a("div",null,c)}const u=n(t,[["render",p],["__file","list.html.vue"]]);export{u as default};
