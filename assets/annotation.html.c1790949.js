import{_ as n}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as a,c as s,e as t}from"./app.cecbd8ac.js";const e={},o=t(`<h1 id="注解的使用" tabindex="-1"><a class="header-anchor" href="#注解的使用" aria-hidden="true">#</a> 注解的使用</h1><h2 id="注解的理解" tabindex="-1"><a class="header-anchor" href="#注解的理解" aria-hidden="true">#</a> 注解的理解</h2><ol><li>jdk 5.0 新增的功能</li><li>Annotation 其实就是代码里的特殊标记, 这些标记可以在编译, 类加载, 运行时被读取, 并执行相应的处理。通过使用 Annotation,程序员可以在不改变原逻辑的情况下, 在源文件中嵌入一些补充信息。</li><li>在JavaSE中，注解的使用目的比较简单，例如标记过时的功能，忽略警告等。在JavaEE/Android中注解占据了更重要的角色，例如用来配置应用程序的任何切面，代替JavaEE旧版中所遗留的繁冗代码和XML配置等。</li></ol><div class="custom-container tip"><p class="custom-container-title">提示</p><p>框架 = 注解 + 反射机制 + 设计模式</p></div><h2 id="注解的使用示例" tabindex="-1"><a class="header-anchor" href="#注解的使用示例" aria-hidden="true">#</a> 注解的使用示例</h2><ol><li>示例一：生成文档相关的注解</li><li>示例二：在编译时进行格式检查(JDK内置的个基本注解) <ul><li>@Override: 限定重写父类方法, 该注解只能用于方法</li><li>@Deprecated: 用于表示所修饰的元素(类, 方法等)已过时。通常是因为所修饰的结构危险或存在更好的择</li><li>@SuppressWarnings: 抑制编译器警告</li></ul></li></ol><h2 id="如何自定义注解" tabindex="-1"><a class="header-anchor" href="#如何自定义注解" aria-hidden="true">#</a> 如何自定义注解</h2><p>参照@SuppressWarnings定义</p><ol><li>注解声明为：@interface</li><li>内部定义成员，通常使用value表示</li><li>可以指定成员的默认值，使用default定义</li><li>如果自定义注解没成员，表明是一个标识作用。</li></ol><div class="custom-container info"><p class="custom-container-title">说明</p><p>如果注解有成员，在使用注解时，需要指明成员的值。</p><p>自定义注解必须配上注解的信息处理流程(使用反射)才意义。</p><p>自定义注解通过都会指明两个元注解：Retention、Target</p></div><p>代码举例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Inherited</span>
<span class="token annotation punctuation">@Repeatable</span><span class="token punctuation">(</span><span class="token class-name">MyAnnotations</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token constant">TYPE</span><span class="token punctuation">,</span> <span class="token constant">FIELD</span><span class="token punctuation">,</span> <span class="token constant">METHOD</span><span class="token punctuation">,</span> <span class="token constant">PARAMETER</span><span class="token punctuation">,</span> <span class="token constant">CONSTRUCTOR</span><span class="token punctuation">,</span> <span class="token constant">LOCAL_VARIABLE</span><span class="token punctuation">,</span><span class="token constant">TYPE_PARAMETER</span><span class="token punctuation">,</span><span class="token constant">TYPE_USE</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">MyAnnotation</span> <span class="token punctuation">{</span>
	<span class="token class-name">String</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="元注解" tabindex="-1"><a class="header-anchor" href="#元注解" aria-hidden="true">#</a> 元注解</h2><p>对现有的注解进行解释说明的注解。</p><p>jdk 提供的4种元注解：</p><p><code>Retention</code>：指定所修饰的 Annotation 的生命周期：SOURCE\\CLASS（默认行为\\RUNTIME 只声明为RUNTIME生命周期的注解，才能通过反射获取。</p><p><code>Target</code>:用于指定被修饰的 Annotation 能用于修饰哪些程序元素 出现的频率较低</p><p><code>Documented</code>:表示所修饰的注解在被javadoc解析时，保留下来。</p><p><code>Inherited</code>:被它修饰的 Annotation 将具继承性。</p><h2 id="如何获取注解信息-通过发射来进行获取、调用。" tabindex="-1"><a class="header-anchor" href="#如何获取注解信息-通过发射来进行获取、调用。" aria-hidden="true">#</a> 如何获取注解信息:通过发射来进行获取、调用。</h2><div class="custom-container info"><p class="custom-container-title">前提</p><p>要求此注解的元注解Retention中声明的生命周期状态为：RUNTIME.</p></div><h2 id="jdk8中注解的新特性" tabindex="-1"><a class="header-anchor" href="#jdk8中注解的新特性" aria-hidden="true">#</a> JDK8中注解的新特性</h2><p>可重复注解、类型注解</p><h3 id="可重复注解" tabindex="-1"><a class="header-anchor" href="#可重复注解" aria-hidden="true">#</a> 可重复注解</h3><p>在<code>MyAnnotation</code>上声明<code>@Repeatable</code>，成员值为<code>MyAnnotations.class</code></p><p><code>MyAnnotation</code>的Target和Retention等元注解与MyAnnotations相同。</p><h3 id="类型注解" tabindex="-1"><a class="header-anchor" href="#类型注解" aria-hidden="true">#</a> 类型注解</h3><p><code>ElementType.TYPE_PARAMETER</code> 表示该注解能写在类型变量的声明语句中(如：泛型声明)</p><p><code>ElementType.TYPE_USE</code> 表示该注解能写在使用类型的任何语句中。</p>`,29),c=[o];function i(p,l){return a(),s("div",null,c)}const u=n(e,[["render",i],["__file","annotation.html.vue"]]);export{u as default};
