import{_ as e,X as a,Y as t,a2 as r}from"./framework-a20dc394.js";const n="/Blog/assets/wrapper1-c3d58d71.png",i="/Blog/assets/wrapper2-00756757.png",c={},s=r('<h1 id="包装类的使用" tabindex="-1"><a class="header-anchor" href="#包装类的使用" aria-hidden="true">#</a> 包装类的使用</h1><h2 id="为什么要有包装类-或封装类" tabindex="-1"><a class="header-anchor" href="#为什么要有包装类-或封装类" aria-hidden="true">#</a> 为什么要有包装类(或封装类）</h2><p>为了使基本数据类型的变量具有类的特征，引入包装类。</p><h2 id="基本数据类型与对应的包装类" tabindex="-1"><a class="header-anchor" href="#基本数据类型与对应的包装类" aria-hidden="true">#</a> 基本数据类型与对应的包装类</h2><p><img src="'+n+'" alt="img.png"></p><h2 id="需要掌握的类型间的转换" tabindex="-1"><a class="header-anchor" href="#需要掌握的类型间的转换" aria-hidden="true">#</a> 需要掌握的类型间的转换</h2><p>基本数据类型、包装类、String<br><img src="'+i+'" alt="img.png"></p><div class="hint-container info"><p class="hint-container-title">简易版</p><p>基本数据类型&lt;---&gt;包装类：JDK 5.0 新特性：自动装箱 与自动拆箱 基本数据类型、包装类---&gt;String:调用String重载的valueOf(Xxx xxx) String---&gt;基本数据类型、包装类:调用包装类的parseXxx(String s)</p></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p>转换时，可能会报NumberFormatException</p></div><p>应用场景举例： <code>Vector</code>类中关于添加元素，只定义了形参为<code>Object</code>类型的方法：</p><blockquote><p>v.addElement(Object obj);</p></blockquote>',11),o=[s];function d(p,h){return a(),t("div",null,o)}const _=e(c,[["render",d],["__file","class-wrapper.html.vue"]]);export{_ as default};
