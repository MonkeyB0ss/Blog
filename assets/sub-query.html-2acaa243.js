const n=JSON.parse('{"key":"v-4051f8e0","path":"/mysql/mysql-basic/sub-query.html","title":"第09章_子查询","lang":"zh-CN","frontmatter":{"date":"2022-12-07T00:00:00.000Z","category":"基础","tag":["MySQL"]},"headers":[{"level":2,"title":"1. 需求分析与问题解决","slug":"_1-需求分析与问题解决","link":"#_1-需求分析与问题解决","children":[{"level":3,"title":"1.1 实际问题","slug":"_1-1-实际问题","link":"#_1-1-实际问题","children":[]},{"level":3,"title":"1.2 子查询的基本使用","slug":"_1-2-子查询的基本使用","link":"#_1-2-子查询的基本使用","children":[]},{"level":3,"title":"1.3 子查询的分类","slug":"_1-3-子查询的分类","link":"#_1-3-子查询的分类","children":[]}]},{"level":2,"title":"2. 单行子查询","slug":"_2-单行子查询","link":"#_2-单行子查询","children":[{"level":3,"title":"2.1 单行比较操作符","slug":"_2-1-单行比较操作符","link":"#_2-1-单行比较操作符","children":[]},{"level":3,"title":"2.2 代码示例","slug":"_2-2-代码示例","link":"#_2-2-代码示例","children":[]},{"level":3,"title":"2.3 HAVING 中的子查询","slug":"_2-3-having-中的子查询","link":"#_2-3-having-中的子查询","children":[]},{"level":3,"title":"2.4 CASE中的子查询","slug":"_2-4-case中的子查询","link":"#_2-4-case中的子查询","children":[]},{"level":3,"title":"2.5 子查询中的空值问题","slug":"_2-5-子查询中的空值问题","link":"#_2-5-子查询中的空值问题","children":[]},{"level":3,"title":"2.5 非法使用子查询","slug":"_2-5-非法使用子查询","link":"#_2-5-非法使用子查询","children":[]}]},{"level":2,"title":"3. 多行子查询","slug":"_3-多行子查询","link":"#_3-多行子查询","children":[{"level":3,"title":"3.1 多行比较操作符","slug":"_3-1-多行比较操作符","link":"#_3-1-多行比较操作符","children":[]},{"level":3,"title":"3.2 代码示例","slug":"_3-2-代码示例","link":"#_3-2-代码示例","children":[]},{"level":3,"title":"3.3 空值问题","slug":"_3-3-空值问题","link":"#_3-3-空值问题","children":[]}]},{"level":2,"title":"4. 相关子查询","slug":"_4-相关子查询","link":"#_4-相关子查询","children":[{"level":3,"title":"4.1 相关子查询执行流程","slug":"_4-1-相关子查询执行流程","link":"#_4-1-相关子查询执行流程","children":[]},{"level":3,"title":"4.2 代码示例","slug":"_4-2-代码示例","link":"#_4-2-代码示例","children":[]},{"level":3,"title":"4.3 EXISTS 与 NOT EXISTS关键字","slug":"_4-3-exists-与-not-exists关键字","link":"#_4-3-exists-与-not-exists关键字","children":[]},{"level":3,"title":"4.4 相关更新","slug":"_4-4-相关更新","link":"#_4-4-相关更新","children":[]},{"level":3,"title":"4.4 相关删除","slug":"_4-4-相关删除","link":"#_4-4-相关删除","children":[]}]},{"level":2,"title":"5. 抛一个思考题","slug":"_5-抛一个思考题","link":"#_5-抛一个思考题","children":[]}],"git":{"createdTime":1670427115000,"updatedTime":1670427115000,"contributors":[{"name":"MonkeyBoss","email":"1912290362@qq.com","commits":1}]},"readingTime":{"minutes":7.93,"words":2379},"filePathRelative":"mysql/mysql-basic/sub-query.md","localizedDate":"2022年12月7日","excerpt":"<h1> 第09章_子查询</h1>\\n<p>子查询指一个查询语句嵌套在另一个查询语句内部的查询，这个特性从MySQL 4.1开始引入。</p>\\n<p>SQL 中子查询的使用大大增强了 SELECT 查询的能力，因为很多时候查询需要从结果集中获取数据，或者需要从同一个表中先计算得出一个数据结果，然后与这个数据结果（可能是某个标量，也可能是某个集合）进行比较。</p>\\n<h2> 1. 需求分析与问题解决</h2>\\n<h3> 1.1 实际问题</h3>\\n<p></p>\\n<p>现有解决方式：</p>\\n<div class=\\"language-sql line-numbers-mode\\" data-ext=\\"sql\\"><pre class=\\"language-sql\\"><code><span class=\\"token comment\\">#方式一：</span>\\n<span class=\\"token keyword\\">SELECT</span> salary\\n<span class=\\"token keyword\\">FROM</span> employees\\n<span class=\\"token keyword\\">WHERE</span> last_name <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\'Abel\'</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">SELECT</span> last_name<span class=\\"token punctuation\\">,</span>salary\\n<span class=\\"token keyword\\">FROM</span> employees\\n<span class=\\"token keyword\\">WHERE</span> salary <span class=\\"token operator\\">&gt;</span> <span class=\\"token number\\">11000</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token comment\\">#方式二：自连接</span>\\n<span class=\\"token keyword\\">SELECT</span> e2<span class=\\"token punctuation\\">.</span>last_name<span class=\\"token punctuation\\">,</span>e2<span class=\\"token punctuation\\">.</span>salary\\n<span class=\\"token keyword\\">FROM</span> employees e1<span class=\\"token punctuation\\">,</span>employees e2\\n<span class=\\"token keyword\\">WHERE</span> e1<span class=\\"token punctuation\\">.</span>last_name <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\'Abel\'</span>\\n<span class=\\"token operator\\">AND</span> e1<span class=\\"token punctuation\\">.</span><span class=\\"token identifier\\"><span class=\\"token punctuation\\">`</span>salary<span class=\\"token punctuation\\">`</span></span> <span class=\\"token operator\\">&lt;</span> e2<span class=\\"token punctuation\\">.</span><span class=\\"token identifier\\"><span class=\\"token punctuation\\">`</span>salary<span class=\\"token punctuation\\">`</span></span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>"}');export{n as data};
