const l=JSON.parse('{"key":"v-1d981fe6","path":"/java/java-basic/object/lower/keyword-abstract.html","title":"关键字：abstract","lang":"zh-CN","frontmatter":{"date":"2022-11-26T00:00:00.000Z","category":"基础","tag":["JAVA"]},"headers":[{"level":2,"title":"可以用来修饰","slug":"可以用来修饰","link":"#可以用来修饰","children":[]},{"level":2,"title":"具体","slug":"具体","link":"#具体","children":[{"level":3,"title":"修饰类：抽象类","slug":"修饰类-抽象类","link":"#修饰类-抽象类","children":[]},{"level":3,"title":"修饰方法：抽象方法","slug":"修饰方法-抽象方法","link":"#修饰方法-抽象方法","children":[]}]},{"level":2,"title":"注意点","slug":"注意点","link":"#注意点","children":[]},{"level":2,"title":"abstract的应用举例","slug":"abstract的应用举例","link":"#abstract的应用举例","children":[]},{"level":2,"title":"模板方法的设计模式","slug":"模板方法的设计模式","link":"#模板方法的设计模式","children":[]}],"git":{"createdTime":1669474184000,"updatedTime":1669558146000,"contributors":[{"name":"MonkeyBoss","email":"1912290362@qq.com","commits":2}]},"readingTime":{"minutes":1.77,"words":530},"filePathRelative":"java/java-basic/object/lower/keyword-abstract.md","localizedDate":"2022年11月26日","excerpt":"<h1> 关键字：abstract</h1>\\n<p><code>abstract</code>: 抽象的</p>\\n<h2> 可以用来修饰</h2>\\n<p>类、方法</p>\\n<h2> 具体</h2>\\n<h3> 修饰类：抽象类</h3>\\n<ol>\\n<li>此类不能实例化</li>\\n<li>抽象类中一定有构造器，便于子类实例化时调用（涉及：子类对象实例化的全过程）</li>\\n<li>开发中，都会提供抽象类的子类，让子类对象实例化，完成相关的操作 ---&gt;抽象的使用前提：继承性</li>\\n</ol>\\n<h3> 修饰方法：抽象方法</h3>\\n<ol>\\n<li>抽象方法只方法的声明，没方法体</li>\\n<li>包含抽象方法的类，一定是一个抽象类。反之，抽象类中可以没有抽象方法的。</li>\\n<li>若子类重写了父类中的所的抽象方法后，此子类方可实例化</li>\\n<li>若子类没重写父类中的所的抽象方法，则此子类也是一个抽象类，需要使用abstract修饰</li>\\n</ol>"}');export{l as data};
