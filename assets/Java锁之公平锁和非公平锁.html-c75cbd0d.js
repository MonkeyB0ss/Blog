const e=JSON.parse('{"key":"v-50691d19","path":"/other/audition/JUC/Java%E9%94%81%E4%B9%8B%E5%85%AC%E5%B9%B3%E9%94%81%E5%92%8C%E9%9D%9E%E5%85%AC%E5%B9%B3%E9%94%81.html","title":"Java锁之公平锁和非公平锁","lang":"zh-CN","frontmatter":{"date":"2023-03-31T00:00:00.000Z","category":"面试","tag":["JUC"]},"headers":[{"level":2,"title":"概念","slug":"概念","link":"#概念","children":[{"level":3,"title":"公平锁","slug":"公平锁","link":"#公平锁","children":[]},{"level":3,"title":"非公平锁","slug":"非公平锁","link":"#非公平锁","children":[]}]},{"level":2,"title":"如何创建","slug":"如何创建","link":"#如何创建","children":[]},{"level":2,"title":"两者区别","slug":"两者区别","link":"#两者区别","children":[]},{"level":2,"title":"题外话","slug":"题外话","link":"#题外话","children":[]}],"git":{"createdTime":1680279876000,"updatedTime":1680279876000,"contributors":[{"name":"MonkeyBoss","email":"1912290362@qq.com","commits":1}]},"readingTime":{"minutes":1.41,"words":422},"filePathRelative":"other/audition/JUC/Java锁之公平锁和非公平锁.md","localizedDate":"2023年3月31日","excerpt":"<h1> Java锁之公平锁和非公平锁</h1>\\n<h2> 概念</h2>\\n<h3> 公平锁</h3>\\n<p>是指多个线程按照申请锁的顺序来获取锁，类似于排队买饭，先来后到，先来先服务，就是公平的，也就是队列</p>\\n<h3> 非公平锁</h3>\\n<p>是指多个线程获取锁的顺序，并不是按照申请锁的顺序，有可能申请的线程比先申请的线程优先获取锁，在高并发环境下，有可能造成优先级翻转，或者饥饿的线程（也就是某个线程一直得不到锁）</p>\\n<h2> 如何创建</h2>\\n<p>并发包中ReentrantLock的创建可以指定析构函数的boolean类型来得到公平锁或者非公平锁，默认是非公平锁</p>\\n"}');export{e as data};
