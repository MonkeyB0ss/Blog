const l=JSON.parse('{"key":"v-7efbc941","path":"/java/java-advanced/multi-thread/thread-synchronization.html","title":"线程的同步机制","lang":"zh-CN","frontmatter":{"date":"2022-11-28T00:00:00.000Z","category":"基础进阶","tag":["JAVA"]},"headers":[{"level":2,"title":"背景","slug":"背景","link":"#背景","children":[]},{"level":2,"title":"解决方案：同步机制","slug":"解决方案-同步机制","link":"#解决方案-同步机制","children":[{"level":3,"title":"方式一：同步代码块","slug":"方式一-同步代码块","link":"#方式一-同步代码块","children":[]},{"level":3,"title":"方式二：同步方法","slug":"方式二-同步方法","link":"#方式二-同步方法","children":[]},{"level":3,"title":"方式三：Lock锁","slug":"方式三-lock锁","link":"#方式三-lock锁","children":[]}]},{"level":2,"title":"面试题","slug":"面试题","link":"#面试题","children":[]},{"level":2,"title":"使用的优先顺序","slug":"使用的优先顺序","link":"#使用的优先顺序","children":[]},{"level":2,"title":"利弊","slug":"利弊","link":"#利弊","children":[]},{"level":2,"title":"线程安全的单例模式(懒汉式)","slug":"线程安全的单例模式-懒汉式","link":"#线程安全的单例模式-懒汉式","children":[]},{"level":2,"title":"死锁问题","slug":"死锁问题","link":"#死锁问题","children":[{"level":3,"title":"理解","slug":"理解","link":"#理解","children":[]},{"level":3,"title":"说明","slug":"说明","link":"#说明","children":[]}]}],"git":{"createdTime":1669650990000,"updatedTime":1669650990000,"contributors":[{"name":"MonkeyBoss","email":"1912290362@qq.com","commits":1}]},"readingTime":{"minutes":3.01,"words":902},"filePathRelative":"java/java-advanced/multi-thread/thread-synchronization.md","localizedDate":"2022年11月28日","excerpt":"<h1> 线程的同步机制</h1>\\n<h2> 背景</h2>\\n<div class=\\"hint-container info\\">\\n<p class=\\"hint-container-title\\">例子</p>\\n<p>创建个窗口卖票，总票数为100张.使用实现Runnable接口的方式</p>\\n<ol>\\n<li>问题：卖票过程中，出现了重票、错票 <mark>出现了线程的安全问题</mark></li>\\n<li>问题出现的原因：当某个线程操作车票的过程中，尚未操作完成时，其他线程参与进来，也操作车票。</li>\\n<li>如何解决：当一个线程a在操作ticket的时候，其他线程不能参与进来。直到线程a操作完ticket时，其他线程才可以开始操作ticket。这种情况即使线程a出现了阻塞，也不能被改变。</li>\\n</ol>\\n</div>"}');export{l as data};
