import{_ as e}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as i,c as a,e as c}from"./app.71f9ab67.js";const d={},l=c('<h1 id="类的结构-代码块" tabindex="-1"><a class="header-anchor" href="#类的结构-代码块" aria-hidden="true">#</a> 类的结构：代码块</h1><div class="custom-container tip"><p class="custom-container-title">提示</p><p>类的成员之四：代码块(初始化块)（重要性较属性、方法、构造器差一些）</p></div><h2 id="代码块的作用" tabindex="-1"><a class="header-anchor" href="#代码块的作用" aria-hidden="true">#</a> 代码块的作用</h2><p>用来初始化类、对象的信息</p><h2 id="分类" tabindex="-1"><a class="header-anchor" href="#分类" aria-hidden="true">#</a> 分类</h2><p>代码块要是使用修饰符，只能使用static <code>静态代码块</code> vs <code>非静态代码块</code></p><p><code>静态代码块</code></p><ul><li>内部可以输出语句</li><li>随着类的加载而执行,而且只执行一次</li><li>作用：初始化类的信息</li><li>如果一个类中定义了多个静态代码块，则按照声明的先后顺序执行</li><li>静态代码块的执行要优先于非静态代码块的执行</li><li>静态代码块内只能调用静态的属性、静态的方法，不能调用非静态的结构</li></ul><p><code>非静态代码块</code></p><ul><li>内部可以输出语句</li><li>随着对象的创建而执行</li><li>每创建一个对象，就执行一次非静态代码块</li><li>作用：可以在创建对象时，对对象的属性等进行初始化</li><li>如果一个类中定义了多个非静态代码块，则按照声明的先后顺序执行</li><li>非静态代码块内可以调用静态的属性、静态的方法，或非静态的属性、非静态的方法</li></ul><h2 id="实例化子类对象时-涉及到父类、子类中静态代码块、非静态代码块、构造器的加载顺序" tabindex="-1"><a class="header-anchor" href="#实例化子类对象时-涉及到父类、子类中静态代码块、非静态代码块、构造器的加载顺序" aria-hidden="true">#</a> 实例化子类对象时，涉及到父类、子类中静态代码块、非静态代码块、构造器的加载顺序：</h2><p>由父及子，静态先行</p><h2 id="属性的赋值顺序" tabindex="-1"><a class="header-anchor" href="#属性的赋值顺序" aria-hidden="true">#</a> 属性的赋值顺序</h2><p>① 默认初始化</p><p>② 显式初始化/⑤ 在代码块中赋值</p><p>③ 构造器中初始化</p><p>④ 有了对象以后，可以通过<code>对象.属性</code>或<code>对象.方法</code>的方式，进行赋值</p><p><strong>执行的先后顺序</strong>：① ➡️ ② / ⑤ ➡️ ③ ➡️ ④</p>',18),r=[l];function o(t,s){return i(),a("div",null,r)}const p=e(d,[["render",o],["__file","class-coder.html.vue"]]);export{p as default};
