import{_ as e}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as c,c as o,b as s,d as n,a as t,w as p,e as i,r as l}from"./app.1ee10b43.js";const u="/Blog/assets/interface.ae1cea06.png",d={},r=i(`<h1 id="关键字-interface" tabindex="-1"><a class="header-anchor" href="#关键字-interface" aria-hidden="true">#</a> 关键字：interface</h1><p><code>interface</code>:接口</p><h2 id="使用说明" tabindex="-1"><a class="header-anchor" href="#使用说明" aria-hidden="true">#</a> 使用说明</h2><ol><li><p>接口使用interface来定义</p></li><li><p>Java中，接口和类是并列的两个结构</p></li><li><p>如何定义接口：定义接口中的成员</p><div class="custom-container tip"><p class="custom-container-title">JDK7及以前</p><p>只能定义全局常量和抽象方法</p><ul><li>全局常量：<code>public static final</code>的.但是书写时，可以省略不写</li><li>抽象方法：<code>public abstract</code>的</li></ul></div><div class="custom-container tip"><p class="custom-container-title">JDK8</p><p>除了定义全局常量和抽象方法之外，还可以定义静态方法、默认方法（略)</p></div></li><li><p>接口中不能定义构造器的！意味着接口不可以实例化</p></li><li><p>Java开发中，接口通过让类去实现(implements)的方式来使用.</p><p>如果实现类覆盖了接口中的所抽象方法，则此实现类就可以实例化</p><p>如果实现类没覆盖接口中所的抽象方法，则此实现类仍为一个抽象类</p></li><li><p>Java类可以实现多个接口 ---&gt;弥补了Java单继承性的局限性</p><p>格式：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">AA</span> <span class="token keyword">extends</span> <span class="token class-name">BB</span> <span class="token keyword">implements</span> <span class="token class-name">CC</span><span class="token punctuation">,</span><span class="token constant">DD</span><span class="token punctuation">,</span><span class="token constant">EE</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>接口与接口之间可以继承，而且可以多继承</p></li><li><p>接口的具体使用，体现多态性</p></li><li><p>接口，实际上可以看做是一种规范</p></li></ol><h2 id="举例" tabindex="-1"><a class="header-anchor" href="#举例" aria-hidden="true">#</a> 举例</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Computer</span><span class="token punctuation">{</span>
   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">transferData</span><span class="token punctuation">(</span><span class="token class-name">USB</span> usb<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//USB usb = new Flash();</span>
	  usb<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;具体传输数据的细节&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  usb<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">USB</span><span class="token punctuation">{</span>
   <span class="token comment">// 常量：定义了长、宽、最大最小的传输速度等</span>
   <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Flash</span> <span class="token keyword">implements</span> <span class="token class-name">USB</span><span class="token punctuation">{</span>
   <span class="token annotation punctuation">@Override</span>
   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;U盘开启工作&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>

   <span class="token annotation punctuation">@Override</span>
   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;U盘结束工作&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Printer</span> <span class="token keyword">implements</span> <span class="token class-name">USB</span><span class="token punctuation">{</span>
   <span class="token annotation punctuation">@Override</span>
   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;打印机开启工作&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>

   <span class="token annotation punctuation">@Override</span>
   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;打印机结束工作&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container info"><p class="custom-container-title">体会</p><ol><li>接口使用上也满足多态性</li><li>接口，实际上就是定义了一种规范</li><li>开发中，体会面向接口编程！</li></ol></div><h2 id="体会面向接口编程的思想" tabindex="-1"><a class="header-anchor" href="#体会面向接口编程的思想" aria-hidden="true">#</a> 体会面向接口编程的思想</h2><p><img src="`+u+`" alt="img.png" loading="lazy"></p><div class="custom-container tip"><p class="custom-container-title">面向接口编程</p><p>我们在应用程序中，调用的结构都是JDBC中定义的接口，不会出现具体某一个数据库厂商的API。</p></div><h2 id="java8中关于接口的新规范" tabindex="-1"><a class="header-anchor" href="#java8中关于接口的新规范" aria-hidden="true">#</a> Java8中关于接口的新规范</h2><ol><li><p>接口中定义的静态方法，只能通过接口来调用。</p></li><li><p>通过实现类的对象，可以调用接口中的默认方法。 如果实现类重写了接口中的默认方法，调用时，仍然调用的是重写以后的方法</p></li><li><p>如果子类(或实现类) 继承的父类和实现的接口中声明了同名同参数的默认方法，那么子类在没重写此方法的情况下，默认调用的是父类中的同名同参数的方法。--&gt; 类优先原则</p></li><li><p>如果实现类实现了多个接口，而这多个接口中定义了同名同参数的默认方法， 那么在实现类没重写此方法的情况下，报错。--&gt;接口冲突。 这就需要我们必须在实现类中重写此方法</p></li><li><p>如何在子类(或实现类)的方法中调用父类、接口中被重写的方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">myMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token comment">// 调用自己定义的重写的方法</span>
     <span class="token function">method3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token comment">// 调用的是父类中声明的</span>
     <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">method3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token comment">// 调用接口中的默认方法</span>
     <span class="token class-name">CompareA</span><span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">method3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token class-name">CompareB</span><span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">method3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol>`,12),k={id:"代理模式",tabindex:"-1"},v=s("a",{class:"header-anchor",href:"#代理模式","aria-hidden":"true"},"#",-1),m={id:"工厂模式",tabindex:"-1"},b=s("a",{class:"header-anchor",href:"#工厂模式","aria-hidden":"true"},"#",-1);function h(f,y){const a=l("RouterLink");return c(),o("div",null,[r,s("h2",k,[v,n(),t(a,{to:"/java/design-patterns/agent.html"},{default:p(()=>[n("代理模式")]),_:1})]),s("h2",m,[b,n(),t(a,{to:"/java/design-patterns/factory.html"},{default:p(()=>[n("工厂模式")]),_:1})])])}const _=e(d,[["render",h],["__file","keyword-interface.html.vue"]]);export{_ as default};
