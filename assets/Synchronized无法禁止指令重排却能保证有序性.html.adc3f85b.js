import{_ as i}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as n,c as r,b as e,d as o,a as s,e as t,r as l}from"./app.c62a3edb.js";const c={},d=t('<h1 id="为什么synchronized无法禁止指令重排-却能保证有序性" tabindex="-1"><a class="header-anchor" href="#为什么synchronized无法禁止指令重排-却能保证有序性" aria-hidden="true">#</a> 为什么Synchronized无法禁止指令重排，却能保证有序性</h1><h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><p>首先我们要分析下这道题，这简单的一个问题，其实里面还是包含了很多信息的，要想回答好这个问题，面试者至少要知道一下概念：</p><ul><li>Java内存模型</li><li>并发编程有序性问题</li><li>指令重排</li><li>synchronized锁</li><li>可重入锁</li><li>排它锁</li><li>as-if-serial语义</li><li>单线程&amp;多线程</li></ul><h2 id="标准解答" tabindex="-1"><a class="header-anchor" href="#标准解答" aria-hidden="true">#</a> 标准解答</h2><p>为了进一步提升计算机各方面能力，在硬件层面做了很多优化，如处理器优化和指令重排等，但是这些技术的引入就会导致有序性问题。</p><blockquote><p>先解释什么是有序性问题，也知道是什么原因导致的有序性问题</p></blockquote><p>我们也知道，最好的解决有序性问题的办法，就是禁止处理器优化和指令重排，就像volatile中使用内存屏障一样。</p><blockquote><p>表明你知道啥是指令重排，也知道他的实现原理</p></blockquote><p>但是，虽然很多硬件都会为了优化做一些重排，但是在Java中，不管怎么排序，都不能影响单线程程序的执行结果。这就是as-if-serial语义，所有硬件优化的前提都是必须遵守as-if-serial语义。</p><p>as-if-serial语义把<strong>单线程</strong>程序保护了起来，遵守as-if-serial语义的编译器，runtime 和处理器共同为编写单线程程序的程序员创建了一个幻觉：单线程程序是按程序的顺序来执行的。as-if-serial语义使单线程程序员无需担心重排序会干扰他们，也无需担心内存可见性问题。</p><blockquote><p>重点！解释下什么是as-if-serial语义，因为这是这道题的第一个关键词，答上来就对了一半了</p></blockquote><p>再说下synchronized，他是Java提供的锁，可以通过他对Java中的对象加锁，并且他是一种排他的、可重入的锁。</p><p>所以，当某个线程执行到一段被synchronized修饰的代码之前，会先进行加锁，执行完之后再进行解锁。在加锁之后，解锁之前，其他线程是无法再次获得锁的，只有这条加锁线程可以重复获得该锁。</p><blockquote><p>介绍synchronized的原理，这是本题的第二个关键点，到这里基本就可以拿满分了。</p></blockquote><p>synchronized通过排他锁的方式就保证了同一时间内，被synchronized修饰的代码是单线程执行的。所以呢，这就满足了as-if-serial语义的一个关键前提，那就是<strong>单线程</strong>，因为有as-if-serial语义保证，单线程的有序性就天然存在了。</p><h2 id="来源" tabindex="-1"><a class="header-anchor" href="#来源" aria-hidden="true">#</a> 来源</h2>',17),h={href:"https://mp.weixin.qq.com/s/Pd6dOXaMQFUHfAUnOhnwtw",target:"_blank",rel:"noopener noreferrer"};function p(_,f){const a=l("ExternalLinkIcon");return n(),r("div",null,[d,e("p",null,[e("a",h,[o("https://mp.weixin.qq.com/s/Pd6dOXaMQFUHfAUnOhnwtw"),s(a)])])])}const b=i(c,[["render",p],["__file","Synchronized无法禁止指令重排却能保证有序性.html.vue"]]);export{b as default};
