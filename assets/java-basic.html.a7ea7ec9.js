import{_ as t}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as d,c as p,b as n,d as s,a as e,w as i,e as a,r as l}from"./app.7d72a819.js";const r="/Blog/assets/VariableType.01186ecd.png",u="/Blog/assets/VariableTypeByLocation.0db8cb16.png",v="/Blog/assets/HEX1.3bd18311.png",m="/Blog/assets/HEX2.910762cb.png",k="/Blog/assets/HEX3.dd762c55.png",b="/Blog/assets/HEX4.0b74b51c.png",g="/Blog/assets/HEX5.edef8f3f.png",h="/Blog/assets/HEX6.eee8d24b.png",_={},f=a('<h1 id="基本语法" tabindex="-1"><a class="header-anchor" href="#基本语法" aria-hidden="true">#</a> 基本语法</h1><h2 id="关键字与标识符" tabindex="-1"><a class="header-anchor" href="#关键字与标识符" aria-hidden="true">#</a> 关键字与标识符</h2><h3 id="_1-java关键字的使用" tabindex="-1"><a class="header-anchor" href="#_1-java关键字的使用" aria-hidden="true">#</a> 1.JAVA关键字的使用</h3><p><strong>定义</strong>：被Java语言赋予了特殊含义，用做专门用途的字符串（单词）</p><p><strong>特点</strong>：关键字中所字母都为小写</p><p>具体哪些关键字：</p><ol><li>用于定义数据类型的关键字：<br><code>class</code>、<code>interface</code>、<code>enum</code>、<code>byte</code>、<code>short</code>、<code>int</code>、<code>lang</code>、<code>float</code>、<code>double</code>、<code>char</code>、<code>boolean</code>、<code>void</code></li><li>用于定义流程控制的关键字：<br><code>if</code>、<code>else</code>、<code>switch</code>、<code>case</code>、<code>default</code>、<code>while</code>、<code>do</code>、<code>for</code>、<code>break</code>、<code>continue</code>、<code>return</code></li><li>用于定义访问权限修饰符的关键字：<br><code>private</code>、<code>protected</code>、<code>public</code></li><li>用于定义类、函数、变量修饰符的关键字：<br><code>abstract</code>、<code>final</code>、<code>static</code>、<code>synchronized</code></li><li>用于定义类与类之间关系的关键字：<br><code>extends</code>、<code>implements</code></li><li>用于定义建立实例与类之间关系的关键字：<br><code>new</code>、<code>this</code>、<code>super</code>、<code>instanceof</code></li><li>用于异常处理的关键字：<br><code>try</code>、<code>catch</code>、<code>finally</code>、<code>throw</code>、<code>throws</code></li><li>用于包的关键字：<br><code>package</code>、<code>import</code></li><li>其它修饰符关键字：<br><code>native</code>、<code>strictfp</code>、<code>transient</code>、<code>volatile</code>、<code>assert</code></li><li>用于定义数据类型值的字面值：<br><code>true</code>、<code>false</code>、<code>null</code></li></ol><h3 id="_2-标识符的使用" tabindex="-1"><a class="header-anchor" href="#_2-标识符的使用" aria-hidden="true">#</a> 2.标识符的使用</h3><p><strong>定义</strong>：凡是自己可以起名字的地方都叫标识符。</p><p>涉及到的结构：</p><p><code>包名</code>、<code>类名</code>、<code>接口名</code>、<code>变量名</code>、<code>方法名</code>、<code>常量名</code></p><p><strong>规则</strong>：</p><div class="custom-container danger"><p class="custom-container-title">必须要遵守。否则，编译不通过</p><ul><li>由26个英文字母大小写,0-9,_或$组成</li><li>数字不可以开头</li><li>不可以使用关键字和保留字,但能包含关键字和保留字</li><li>Java中严格区分大小写,长度无限制</li><li>标识符不能包含空格</li></ul></div><p><strong>规范</strong>：</p><div class="custom-container tip"><p class="custom-container-title">可以不遵守，不影响编译和运行。但是要求大家遵守</p><ul><li><strong>包名</strong>：多单词组成时所有字母都小写：<code>xxxyyyzzz</code></li><li><strong>类名</strong>、接口名：多单词组成时,所有单词的首字母大写：<code>XxxYyyZzz</code></li><li><strong>变量名</strong>、方法名：多单词组成时,第一个单词首字母小写,第二个单词开始每个单词首字母大写：<code>xxxYyyZzz</code></li><li><strong>常量名</strong>：所有字母都大写。多单词时每个单词用下划线连接：<code>XXX_YYY_ZZZ</code></li></ul></div><p><strong>注意点</strong>：在起名字时，为了提高阅读性，要尽量有意义，<strong>&quot;见名知意&quot;</strong>。</p>',16),y={id:"变量的使用-重点🔖",tabindex:"-1"},w=n("a",{class:"header-anchor",href:"#变量的使用-重点🔖","aria-hidden":"true"},"#",-1),x=a('<h3 id="_1-变量的分类" tabindex="-1"><a class="header-anchor" href="#_1-变量的分类" aria-hidden="true">#</a> 1.变量的分类</h3><ul><li><strong>1.1 按数据类型分类</strong>：<br><img src="'+r+'" alt="VariableType" loading="lazy"></li></ul><p><em>详细说明</em>：</p><ol><li>整型：byte(1字节=8bit) \\ short(2字节) \\ int(4字节) \\ long(8字节) <ol><li>byte范围：-128 ~ 127</li><li>声明long型变量，必须以&quot;l&quot;或&quot;L&quot;结尾</li><li>通常，定义整型变量时，使用int型。</li><li>整型的常量，默认类型是：int型</li></ol></li><li>浮点型：float(4字节) \\ double(8字节) <ol><li>浮点型，表示带小数点的数值</li><li>float表示数值的范围比long还大</li><li>定义float类型变量时，变量要以&quot;f&quot;或&quot;F&quot;结尾</li><li>通常，定义浮点型变量时，使用double型。</li><li>浮点型的常量，默认类型为：double</li></ol></li><li>字符型：char (1字符=2字节) <ol><li>定义char型变量，通常使用一对&#39;&#39;,内部只能写一个字符</li><li>表示方式： <ul><li>声明一个字符</li><li>转义字符</li><li>直接使用Unicode值来表示字符型常量</li></ul></li></ol></li><li>布尔型：boolean <ol><li>只能取两个值之一：true 、 false</li><li>常常在条件判断、循环结构中使用</li></ol></li></ol><ul><li><strong>1.2 按声明位置分类</strong>：<br><img src="'+u+`" alt="VariableTypeByLocation" loading="lazy"></li></ul><h3 id="_2-定义变量的格式" tabindex="-1"><a class="header-anchor" href="#_2-定义变量的格式" aria-hidden="true">#</a> 2.定义变量的格式</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>数据类型  变量名 = 变量值;
或
数据类型  变量名;
变量名 = 变量值;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-变量使用的注意点" tabindex="-1"><a class="header-anchor" href="#_3-变量使用的注意点" aria-hidden="true">#</a> 3.变量使用的注意点</h3><ul><li><strong>变量必须先声明，后使用</strong></li><li><strong>变量都定义在其作用域内。在作用域内，它是有效的。换句话说，出了作用域，就失效了</strong></li><li><strong>同一个作用域内，不可以声明两个同名的变量</strong></li></ul><h3 id="_4-基本数据类型变量间运算规则" tabindex="-1"><a class="header-anchor" href="#_4-基本数据类型变量间运算规则" aria-hidden="true">#</a> 4.基本数据类型变量间运算规则</h3><ol><li><p>涉及到的基本数据类型：除了boolean之外的其他7种</p></li><li><p>自动类型转换(只涉及7种基本数据类型）<br><strong>结论</strong>：当容量小的数据类型的变量与容量大的数据类型的变量做运算时，结果自动提升为容量大的数据类型。 byte 、char 、short ➡️ int ➡️ long ➡️ float ➡️ double<br><strong>特别的</strong>：当byte、char、short三种类型的变量做运算时，结果为int型<br><strong>说明</strong>：此时的容量大小指的是，表示数的范围的大和小。比如：float容量要大于long的容量</p></li><li><p>强制类型转换(只涉及7种基本数据类型）：自动类型提升运算的逆运算。</p><ol><li>需要使用强转符：<code>()</code></li><li>注意点：强制类型转换，可能导致精度损失。</li></ol></li><li><p>String与8种基本数据类型间的运算</p><ol><li>String属于引用数据类型,翻译为：字符串</li><li>声明String类型变量时，使用一对<code>&quot;&quot;</code></li><li>String可以和8种基本数据类型变量做运算，且运算只能是连接运算：<code>+</code></li><li>运算的结果仍然是String类型</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token comment">// 避免：</span>
 <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span><span class="token comment">//编译错误</span>
 <span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token string">&quot;123&quot;</span><span class="token punctuation">;</span>
 <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>s1<span class="token punctuation">;</span><span class="token comment">//编译错误</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol>`,11),j={id:"进制-了解",tabindex:"-1"},q=n("a",{class:"header-anchor",href:"#进制-了解","aria-hidden":"true"},"#",-1),z=a('<ol><li>编程中涉及的进制及表示方式：<br><img src="'+v+'" alt="HEX1" loading="lazy"></li><li>二进制的使用说明： <ol><li>计算机底层的存储方式：所有数字在计算机底层都以<strong>二进制</strong>形式存在。</li><li>二进制数据的存储方式：所有的数值，不管正负，底层都以补码的方式存储。</li><li>原码、反码、补码的说明：<br> 正数：三码合一<br> 负数：<br><img src="'+m+'" alt="img.png" loading="lazy"></li></ol></li><li>进制间的转换： <ol><li>图示：<br><img src="'+k+'" alt="img.png" loading="lazy"></li><li>图示二进制转换为十进制：<br><img src="'+b+'" alt="img.png" loading="lazy"></li><li>图示十进制转换为二进制：<br><img src="'+g+'" alt="img.png" loading="lazy"></li><li>二进制与八进制、十六进制间的转换：<br><img src="'+h+'" alt="img.png" loading="lazy"></li></ol></li></ol><h2 id="运算符" tabindex="-1"><a class="header-anchor" href="#运算符" aria-hidden="true">#</a> 运算符</h2><ol><li>算术运算符： <code>+</code> <code>-</code> <code>*</code> <code>/</code> <code>%</code> <code>(前)++</code> <code>(后)++</code> <code>(前)--</code> <code>(后)--</code></li><li>赋值运算符：<code>=</code> <code>+=</code> <code>-=</code> <code>*=</code> <code>/=</code> <code>%=</code></li><li>比较运算符（关系运算符）：<code>==</code> <code>!=</code> <code>&gt;</code> <code>&lt;</code> <code>&gt;=</code> <code>&lt;=</code> <code>instanceof</code></li><li>逻辑运算符：<code>&amp;</code> <code>&amp;&amp;</code> <code>|</code> <code>||</code> <code>!</code> <code>^</code></li><li>位运算符：<code>&lt;&lt;</code> <code>&gt;&gt;</code> <code>&gt;&gt;&gt;</code> <code>&amp;</code> <code>|</code> <code>^</code> <code>~</code></li><li>三元运算符：<code>(条件表达式) ? 表达式1 : 表达式2</code></li></ol><h2 id="流程控制" tabindex="-1"><a class="header-anchor" href="#流程控制" aria-hidden="true">#</a> 流程控制</h2>',4),B=a(`<li><p>if-else条件判断结构</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 结构一：</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>条件表达式<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    执行表达式
<span class="token punctuation">}</span>

<span class="token comment">// 结构二：二选一</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>条件表达式<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    执行表达式<span class="token number">1</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    执行表达式<span class="token number">2</span>
<span class="token punctuation">}</span>

<span class="token comment">// 结构三：n选一</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>条件表达式<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    执行表达式<span class="token number">1</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>条件表达式<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    执行表达式<span class="token number">2</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>条件表达式<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    执行表达式<span class="token number">3</span>
<span class="token punctuation">}</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token keyword">else</span> <span class="token punctuation">{</span>
    执行表达式n
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">说明</p><ol><li>else 结构是可选的。</li><li>针对于条件表达式： <ul><li>如果多个条件表达式之间是“互斥”关系(或没有交集的关系),哪个判断和执行语句声明在上面还是下面，无所谓。</li><li>如果多个条件表达式之间有交集的关系，需要根据实际情况，考虑清楚应该将哪个结构声明在上面。</li><li>如果多个条件表达式之间有包含的关系，通常情况下，需要将范围小的声明在范围大的上面。否则，范围小的就没机会执行了。</li></ul></li><li>if-else结构是可以相互嵌套的。</li><li>如果if-else结构中的执行语句只有一行时，对应的一对{}可以省略的。但是，不建议大家省略。</li></ol></div></li><li><p>switch-case选择结构</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">switch</span> <span class="token punctuation">(</span>表达式<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> 常量<span class="token number">1</span><span class="token operator">:</span>
    执行语句<span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token comment">//break;</span>
    <span class="token keyword">case</span> 常量<span class="token number">2</span><span class="token operator">:</span>
    执行语句<span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token comment">//break;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">default</span><span class="token operator">:</span>
    执行语句n<span class="token punctuation">;</span>
    <span class="token comment">//break;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">说明</p><ol><li>根据switch表达式中的值，依次匹配各个case中的常量。一旦匹配成功，则进入相应case结构中，调用其执行语句。 当调用完执行语句以后，则仍然继续向下执行其他case结构中的执行语句，直到遇到break关键字或此switch-case结构 末尾结束为止。</li><li>break,可以使用在switch-case结构中，表示一旦执行到此关键字，就跳出switch-case结构</li><li>switch结构中的表达式，只能是如下的6种数据类型之一： byte 、short、char、int、枚举类型(JDK5.0新增)、String类型(JDK7.0新增)</li><li>case 之后只能声明常量。不能声明范围。</li><li>break关键字是可选的。</li><li>default:相当于if-else结构中的else.</li></ol></div></li>`,2),X=n("p",null,"循环结构的四要素",-1),S=n("li",null,"初始化条件",-1),V=n("li",null,"循环体",-1),E=n("li",null,"迭代条件",-1),H=a(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 三种循环结构：</span>
<span class="token comment">// for循环结构</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span>①<span class="token punctuation">;</span> ②<span class="token punctuation">;</span> ④<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ③
<span class="token punctuation">}</span>
<span class="token comment">// 执行过程：① - ② - ③ - ④ - ② - ③ - ④ - ... - ②</span>

<span class="token comment">// while循环结构</span>
①
<span class="token keyword">while</span> <span class="token punctuation">(</span>②<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ③<span class="token punctuation">;</span>
    ④<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
执行过程：① <span class="token operator">-</span> ② <span class="token operator">-</span> ③ <span class="token operator">-</span> ④ <span class="token operator">-</span> ② <span class="token operator">-</span> ③ <span class="token operator">-</span> ④ <span class="token operator">-</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token operator">-</span> ②

<span class="token comment">// do-while循环结构</span>
①
<span class="token keyword">do</span> <span class="token punctuation">{</span>
    ③<span class="token punctuation">;</span>
    ④<span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">while</span><span class="token punctuation">(</span>②<span class="token punctuation">)</span><span class="token punctuation">;</span>
执行过程：① <span class="token operator">-</span> ③ <span class="token operator">-</span> ④ <span class="token operator">-</span> ② <span class="token operator">-</span> ③ <span class="token operator">-</span> ④ <span class="token operator">-</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token operator">-</span> ②

<span class="token comment">// &quot;无限循环&quot;结构: </span>
<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> 
<span class="token comment">// 或 </span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1);function J(T,Y){const o=l("font"),c=l("Badge");return d(),p("div",null,[f,n("h2",y,[w,s(),e(o,{color:"red"},{default:i(()=>[s("变量的使用(重点🔖)")]),_:1})]),x,n("h2",j,[q,s(),e(o,{color:"grey"},{default:i(()=>[s("进制(了解)")]),_:1})]),z,n("ol",null,[B,n("li",null,[X,n("ol",null,[S,n("li",null,[s("循环条件 "),e(c,{type:"tip",text:"boolean",vertical:"middle"})]),V,E]),H])])])}const L=t(_,[["render",J],["__file","java-basic.html.vue"]]);export{L as default};
