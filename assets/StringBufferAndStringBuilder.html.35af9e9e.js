import{_ as n}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as s,c as a,e as t}from"./app.71f9ab67.js";const e={},i=t(`<h1 id="stringbuffer、stringbuilder" tabindex="-1"><a class="header-anchor" href="#stringbuffer、stringbuilder" aria-hidden="true">#</a> StringBuffer、StringBuilder</h1><h2 id="string、stringbuffer、stringbuilder三者的对比" tabindex="-1"><a class="header-anchor" href="#string、stringbuffer、stringbuilder三者的对比" aria-hidden="true">#</a> String、StringBuffer、StringBuilder三者的对比</h2><p><code>String</code>:不可变的字符序列；底层使用char[]存储</p><p><code>StringBuffer</code>:可变的字符序列；线程安全的，效率低；底层使用char[]存储</p><p><code>StringBuilder</code>:可变的字符序列；jdk5.0新增的，线程不安全的，效率高；底层使用char[]存储</p><h2 id="stringbuffer与stringbuilder的内存解析" tabindex="-1"><a class="header-anchor" href="#stringbuffer与stringbuilder的内存解析" aria-hidden="true">#</a> StringBuffer与StringBuilder的内存解析</h2><p>以StringBuffer为例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//char[] value = new char[0];</span>
<span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//char[] value = new char[]{&#39;a&#39;,&#39;b&#39;,&#39;c&#39;};</span>

<span class="token class-name">StringBuffer</span> sb1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//char[] value = new char[16];底层创建了一个长度是16的数组。</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sb1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//</span>
sb1<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token char">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//value[0] = &#39;a&#39;;</span>
sb1<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token char">&#39;b&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//value[1] = &#39;b&#39;;</span>

<span class="token class-name">StringBuffer</span> sb2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//char[] value = new char[&quot;abc&quot;.length() + 16];</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>问题1. System.out.println(sb2.length()); // 3</p><p>问题2. 扩容问题:如果要添加的数据底层数组盛不下了，那就需要扩容底层的数组。</p><p>默认情况下，扩容为原来容量的<mark>2倍 + 2</mark>，同时将原数组中的元素复制到新的数组中。</p><div class="custom-container tip"><p class="custom-container-title">指导意义</p><p>开发中建议大家使用：<code>StringBuffer(int capacity)</code> 或 <code>StringBuilder(int capacity)</code></p></div><h2 id="对比string、stringbuffer、stringbuilder三者的执行效率" tabindex="-1"><a class="header-anchor" href="#对比string、stringbuffer、stringbuilder三者的执行效率" aria-hidden="true">#</a> 对比String、StringBuffer、StringBuilder三者的执行效率</h2><p>从高到低排列：<code>StringBuilder</code> &gt; <code>StringBuffer</code> &gt; <code>String</code></p><h2 id="stringbuffer、stringbuilder中的常用方法" tabindex="-1"><a class="header-anchor" href="#stringbuffer、stringbuilder中的常用方法" aria-hidden="true">#</a> StringBuffer、StringBuilder中的常用方法</h2><ul><li>增：append(xxx)</li><li>删：delete(int start,int end)</li><li>改：setCharAt(int n ,char ch) / replace(int start, int end, String str)</li><li>查：charAt(int n )</li><li>插：insert(int offset, xxx)</li><li>长度：length();</li><li>遍历：for() + charAt() / toString()</li></ul>`,16),r=[i];function c(p,o){return s(),a("div",null,r)}const d=n(e,[["render",c],["__file","StringBufferAndStringBuilder.html.vue"]]);export{d as default};
