const e=JSON.parse('{"key":"v-09a2e130","path":"/java/java-advanced/multi-thread/thread-notify.html","title":"线程通信","lang":"zh-CN","frontmatter":{"date":"2022-11-28T00:00:00.000Z","category":"基础进阶","tag":["JAVA"]},"headers":[{"level":2,"title":"线程通信涉及到的三个方法","slug":"线程通信涉及到的三个方法","link":"#线程通信涉及到的三个方法","children":[]},{"level":2,"title":"说明","slug":"说明","link":"#说明","children":[]},{"level":2,"title":"面试题","slug":"面试题","link":"#面试题","children":[]},{"level":2,"title":"释放锁的操作","slug":"释放锁的操作","link":"#释放锁的操作","children":[]},{"level":2,"title":"不会释放锁的操作","slug":"不会释放锁的操作","link":"#不会释放锁的操作","children":[]}],"git":{"createdTime":1669650990000,"updatedTime":1669650990000,"contributors":[{"name":"MonkeyBoss","email":"1912290362@qq.com","commits":1}]},"readingTime":{"minutes":1.18,"words":353},"filePathRelative":"java/java-advanced/multi-thread/thread-notify.md","localizedDate":"2022年11月28日","excerpt":"<h1> 线程通信</h1>\\n<h2> 线程通信涉及到的三个方法</h2>\\n<ul>\\n<li><code>wait()</code>: 一旦执行此方法，当前线程就进入阻塞状态，并释放同步监视器。</li>\\n<li><code>notify()</code>: 一旦执行此方法，就会唤醒被wait的一个线程。如果有多个线程被wait，就唤醒优先级高的那个。</li>\\n<li><code>notifyAll()</code>: 一旦执行此方法，就会唤醒所有被wait的线程。</li>\\n</ul>\\n<h2> 说明</h2>\\n<ol>\\n<li><code>wait()</code>，<code>notify()</code>，<code>notifyAll()</code>三个方法必须使用在同步代码块或同步方法中。</li>\\n<li><code>wait()</code>，<code>notify()</code>，<code>notifyAll()</code>三个方法的调用者必须是同步代码块或同步方法中的同步监视器。否则，会出现<mark>IllegalMonitorStateException异常</mark></li>\\n<li>wait()，notify()，notifyAll()三个方法是定义在java.lang.Object类中。</li>\\n</ol>"}');export{e as data};
