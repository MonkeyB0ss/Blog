import{_ as a}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as e,c as r,e as i}from"./app.c0047b93.js";const n="/Blog/assets/functionalInterface.ae5fe618.png",t={},d=i('<h1 id="函数式接口" tabindex="-1"><a class="header-anchor" href="#函数式接口" aria-hidden="true">#</a> 函数式接口</h1><h2 id="函数式接口的使用说明" tabindex="-1"><a class="header-anchor" href="#函数式接口的使用说明" aria-hidden="true">#</a> 函数式接口的使用说明</h2><ul><li>如果一个接口中，只声明了一个抽象方法，则此接口就称为函数式接口。</li><li>我们可以在一个接口上使用 @FunctionalInterface 注解，这样做可以检查它是否是一个函数式接口。</li><li>Lambda表达式的本质：作为函数式接口的实例</li></ul><h2 id="函数式接口-1" tabindex="-1"><a class="header-anchor" href="#函数式接口-1" aria-hidden="true">#</a> 函数式接口</h2><p>Java8中关于Lambda表达式提供的4个基本的函数式接口</p><p>具体使用：</p><p><img src="'+n+'" alt="img.png"></p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><h3 id="何时使用lambda表达式" tabindex="-1"><a class="header-anchor" href="#何时使用lambda表达式" aria-hidden="true">#</a> 何时使用lambda表达式？</h3><p>当需要对一个函数式接口实例化的时候，可以使用lambda表达式。</p><h3 id="何时使用给定的函数式接口" tabindex="-1"><a class="header-anchor" href="#何时使用给定的函数式接口" aria-hidden="true">#</a> 何时使用给定的函数式接口？</h3><p>如果我们开发中需要定义一个函数式接口，首先看看在已有的jdk提供的函数式接口是否提供了能满足需求的函数式接口。如果有，则直接调用即可，不需要自己再自定义了。</p>',12),h=[d];function c(l,s){return e(),r("div",null,h)}const p=a(t,[["render",c],["__file","FunctionalInterface.html.vue"]]);export{p as default};
