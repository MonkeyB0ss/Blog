const a=JSON.parse('{"key":"v-9c6fc078","path":"/java/source-code/jdk/ArrayList.html","title":"ArrayList","lang":"zh-CN","frontmatter":{"date":"2023-09-03T00:00:00.000Z","category":"Source Code","tag":["JAVA"]},"headers":[{"level":2,"title":"ArrayList 简介","slug":"arraylist-简介","link":"#arraylist-简介","children":[{"level":3,"title":"ArrayList 和 Vector 的区别?","slug":"arraylist-和-vector-的区别","link":"#arraylist-和-vector-的区别","children":[]},{"level":3,"title":"ArrayList 可以添加 null 值吗？","slug":"arraylist-可以添加-null-值吗","link":"#arraylist-可以添加-null-值吗","children":[]},{"level":3,"title":"Arraylist 与 LinkedList 区别?","slug":"arraylist-与-linkedlist-区别","link":"#arraylist-与-linkedlist-区别","children":[]}]},{"level":2,"title":"ArrayList 核心源码解读","slug":"arraylist-核心源码解读","link":"#arraylist-核心源码解读","children":[]},{"level":2,"title":"ArrayList 扩容机制分析","slug":"arraylist-扩容机制分析","link":"#arraylist-扩容机制分析","children":[{"level":3,"title":"先从 ArrayList 的构造函数说起","slug":"先从-arraylist-的构造函数说起","link":"#先从-arraylist-的构造函数说起","children":[]},{"level":3,"title":"一步一步分析 ArrayList 扩容机制","slug":"一步一步分析-arraylist-扩容机制","link":"#一步一步分析-arraylist-扩容机制","children":[]}]}],"git":{"createdTime":1693756203000,"updatedTime":1693756203000,"contributors":[{"name":"MonkeyBoss","email":"1912290362@qq.com","commits":1}]},"readingTime":{"minutes":14.78,"words":4434},"filePathRelative":"java/source-code/jdk/ArrayList.md","localizedDate":"2023年9月3日","excerpt":"<h1> ArrayList</h1>\\n<h2> ArrayList 简介</h2>\\n<p>ArrayList 的底层是数组队列，相当于动态数组。与 Java 中的数组相比，它的容量能动态增长。在添加大量元素前，应用程序可以使用ensureCapacity操作来增加 ArrayList 实例的容量。这可以减少递增式再分配的数量。</p>\\n<p>ArrayList 继承于 AbstractList ，实现了 List, RandomAccess, Cloneable, java.io.Serializable 这些接口。</p>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">ArrayList</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">E</span><span class=\\"token punctuation\\">&gt;</span></span> <span class=\\"token keyword\\">extends</span> <span class=\\"token class-name\\">AbstractList</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">E</span><span class=\\"token punctuation\\">&gt;</span></span> \\n    <span class=\\"token keyword\\">implements</span> <span class=\\"token class-name\\">List</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">E</span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">RandomAccess</span><span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">Cloneable</span><span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\"><span class=\\"token namespace\\">java<span class=\\"token punctuation\\">.</span>io<span class=\\"token punctuation\\">.</span></span>Serializable</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>"}');export{a as data};
