const n=JSON.parse('{"key":"v-71b07f05","path":"/java/design-patterns/agent.html","title":"代理模式","lang":"zh-CN","frontmatter":{"date":"2022-11-27T00:00:00.000Z","category":"基础","tag":["JAVA","设计模式"]},"headers":[{"level":2,"title":"解决的问题","slug":"解决的问题","link":"#解决的问题","children":[]},{"level":2,"title":"举例","slug":"举例","link":"#举例","children":[]},{"level":2,"title":"应用场景","slug":"应用场景","link":"#应用场景","children":[]}],"git":{"createdTime":1669649886000,"updatedTime":1669649886000,"contributors":[{"name":"MonkeyBoss","email":"1912290362@qq.com","commits":1}]},"readingTime":{"minutes":0.48,"words":145},"filePathRelative":"java/design-patterns/agent.md","localizedDate":"2022年11月27日","excerpt":"<h1> 代理模式</h1>\\n<h2> 解决的问题</h2>\\n<p>代理模式是Java开发中使用较多的一种设计模式。代理设计就是为其他对象提供一种代理以控制对这个对象的访问。</p>\\n<h2> 举例</h2>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">interface</span> <span class=\\"token class-name\\">NetWork</span><span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">browse</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token comment\\">// 被代理类</span>\\n<span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">Server</span> <span class=\\"token keyword\\">implements</span> <span class=\\"token class-name\\">NetWork</span><span class=\\"token punctuation\\">{</span>\\n\\t<span class=\\"token annotation punctuation\\">@Override</span>\\n\\t<span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">browse</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n\\t\\t<span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"真实的服务器访问网络\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token comment\\">// 代理类</span>\\n<span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">ProxyServer</span> <span class=\\"token keyword\\">implements</span> <span class=\\"token class-name\\">NetWork</span><span class=\\"token punctuation\\">{</span>\\n\\t<span class=\\"token keyword\\">private</span> <span class=\\"token class-name\\">NetWork</span> work<span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token keyword\\">public</span> <span class=\\"token class-name\\">ProxyServer</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">NetWork</span> work<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n\\t\\t<span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>work <span class=\\"token operator\\">=</span> work<span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token punctuation\\">}</span>\\n\\t<span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">check</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n\\t\\t<span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"联网之前的检查工作\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token punctuation\\">}</span>\\n\\t<span class=\\"token annotation punctuation\\">@Override</span>\\n\\t<span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">browse</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n\\t\\t<span class=\\"token function\\">check</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t\\twork<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">browse</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>"}');export{n as data};
