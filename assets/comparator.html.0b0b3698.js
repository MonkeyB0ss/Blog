import{_ as n}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as s,c as a,e as t}from"./app.c0047b93.js";const e={},o=t(`<h1 id="java比较器" tabindex="-1"><a class="header-anchor" href="#java比较器" aria-hidden="true">#</a> Java比较器</h1><h2 id="使用背景" tabindex="-1"><a class="header-anchor" href="#使用背景" aria-hidden="true">#</a> 使用背景</h2><p>Java中的对象，正常情况下，只能进行比较：<code>==</code> 或 <code>!=</code> 。不能使用 <code>&gt;</code> 或 <code>&lt;</code> 的</p><p>但是在开发场景中，我们需要对多个对象进行排序，言外之意，就需要比较对象的大小。</p><p>如何实现？使用两个接口中的任何一个：<code>Comparable</code> 或 <code>Comparator</code></p><h2 id="自然排序" tabindex="-1"><a class="header-anchor" href="#自然排序" aria-hidden="true">#</a> 自然排序</h2><p>使用Comparable接口</p><h3 id="说明" tabindex="-1"><a class="header-anchor" href="#说明" aria-hidden="true">#</a> 说明</h3><ol><li>像String、包装类等实现了<code>Comparable</code>接口，重写了<code>compareTo(obj)</code>方法，给出了比较两个对象大小的方式。</li><li>像String、包装类重写<code>compareTo()</code>方法以后，进行了从小到大的排列</li><li>重写<code>compareTo(obj)</code>的规则： <ul><li>如果当前对象this大于形参对象obj，则返回正整数，</li><li>如果当前对象this小于形参对象obj，则返回负整数，</li><li>如果当前对象this等于形参对象obj，则返回零。</li></ul></li><li>对于自定义类来说，如果需要排序，我们可以让自定义类实现<code>Comparable</code>接口，重写<code>compareTo(obj)</code>方法。在<code>compareTo(obj)</code> 方法中指明如何排序</li></ol><h3 id="自定义类代码举例" tabindex="-1"><a class="header-anchor" href="#自定义类代码举例" aria-hidden="true">#</a> 自定义类代码举例</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Goods</span> <span class="token keyword">implements</span>  <span class="token class-name">Comparable</span><span class="token punctuation">{</span>

	<span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
	<span class="token keyword">private</span> <span class="token keyword">double</span> price<span class="token punctuation">;</span>
	
	<span class="token comment">// 指明商品比较大小的方式:照价格从低到高排序,再照产品名称从高到低排序</span>
	<span class="token annotation punctuation">@Override</span>
	<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// System.out.println(&quot;**************&quot;);</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token keyword">instanceof</span> <span class="token class-name">Goods</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token class-name">Goods</span> goods <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Goods</span><span class="token punctuation">)</span>o<span class="token punctuation">;</span>
			<span class="token comment">// 方式一：</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">&gt;</span> goods<span class="token punctuation">.</span>price<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">&lt;</span> goods<span class="token punctuation">.</span>price<span class="token punctuation">)</span><span class="token punctuation">{</span>
				<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
				<span class="token comment">// return 0;</span>
				<span class="token keyword">return</span> <span class="token operator">-</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>goods<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
			<span class="token comment">// 方式二：</span>
			<span class="token comment">// return Double.compare(this.price,goods.price);</span>
		<span class="token punctuation">}</span>
		<span class="token comment">// return 0;</span>
		<span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&quot;传入的数据类型不一致！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token comment">// getter、setter、toString()、构造器：省略</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="定制排序" tabindex="-1"><a class="header-anchor" href="#定制排序" aria-hidden="true">#</a> 定制排序</h2><p>使用Comparator接口</p><h3 id="说明-1" tabindex="-1"><a class="header-anchor" href="#说明-1" aria-hidden="true">#</a> 说明</h3><ol><li>背景：当元素的类型没实现<code>java.lang.Comparable</code>接口而又不方便修改代码，或者实现了<code>java.lang.Comparable</code> 接口的排序规则不适合当前的操作，那么可以考虑使用 <code>Comparator</code> 的对象来排序</li><li>重写<code>compare(Object o1,Object o2)</code>方法，比较o1和o2的大小： 如果方法返回正整数，则表示o1大于o2； 如果返回0，表示相等； 返回负整数，表示o1小于o2。</li></ol><h3 id="代码举例" tabindex="-1"><a class="header-anchor" href="#代码举例" aria-hidden="true">#</a> 代码举例</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Comparator</span> com <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// 指明商品比较大小的方式:照产品名称从低到高排序,再照价格从高到低排序</span>
	<span class="token annotation punctuation">@Override</span>
	<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o1<span class="token punctuation">,</span> <span class="token class-name">Object</span> o2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>o1 <span class="token keyword">instanceof</span> <span class="token class-name">Goods</span> <span class="token operator">&amp;&amp;</span> o2 <span class="token keyword">instanceof</span> <span class="token class-name">Goods</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
			<span class="token class-name">Goods</span> g1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Goods</span><span class="token punctuation">)</span>o1<span class="token punctuation">;</span>
			<span class="token class-name">Goods</span> g2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Goods</span><span class="token punctuation">)</span>o2<span class="token punctuation">;</span>
			<span class="token keyword">if</span><span class="token punctuation">(</span>g1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>g2<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
				<span class="token keyword">return</span> <span class="token operator">-</span><span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>g1<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>g2<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
				<span class="token keyword">return</span> g1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>g2<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&quot;输入的数据类型不一致&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">使用</p><ul><li>Arrays.sort(goods,com);</li><li>Collections.sort(coll,com);</li><li>new TreeSet(com);</li></ul></div><h2 id="两种排序方式对比" tabindex="-1"><a class="header-anchor" href="#两种排序方式对比" aria-hidden="true">#</a> 两种排序方式对比</h2><ul><li>Comparable接口的方式一旦一定，保证Comparable接口实现类的对象在任何位置都可以比较大小。</li><li>Comparator接口属于临时性的比较。</li></ul>`,20),p=[o];function c(l,i){return s(),a("div",null,p)}const d=n(e,[["render",c],["__file","comparator.html.vue"]]);export{d as default};
