import{_ as n}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as a,c as s,e as t}from"./app.6c68b90f.js";const e={},c=t(`<h1 id="main-的使用说明" tabindex="-1"><a class="header-anchor" href="#main-的使用说明" aria-hidden="true">#</a> main()的使用说明</h1><ol><li><code>main()</code>方法作为程序的入口</li><li><code>main()</code>方法也是一个普通的静态方法</li><li><code>main()</code>方法可以作为我们与控制台交互的方式。（之前：使用Scanner）</li></ol><div class="custom-container tip"><p class="custom-container-title">提示</p><p>如何将控制台获取的数据传给形参：String[] args?<br> 运行时：java 类名 &quot;Tom&quot; &quot;Jerry&quot; &quot;123&quot; &quot;true&quot;</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// &quot;Tom&quot;</span>
<span class="token function">sysout</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// &quot;true&quot;  --&gt;Boolean.parseBoolean(args[3]);</span>
<span class="token function">sysout</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 报异常</span>
<span class="token function">sysout</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h2><p>权限修饰符：<code>private</code> <code>缺省</code> <code>protected</code> <code>pubilc</code> ----&gt;封装性</p><p>修饰符：<code>static</code> \\ <code>fina</code>l \\ <code>abstract</code> \\ <code>native</code> 可以用来修饰方法</p><p>返回值类型： 无返回值 / 有返回值 --&gt;return</p><p>方法名：需要满足标识符命名的规则、规范；<code>见名知意</code></p><p>形参列表：<code>重载</code> vs <code>重写</code>；参数的值传递机制；体现对象的多态性</p><p>方法体：来体现方法的功能</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//方法体}</span>

<span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">Person</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Man</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    p<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//p.earnMoney();</span>

    <span class="token class-name">Man</span> man <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Man</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    man<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    man<span class="token punctuation">.</span><span class="token function">earnMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11),o=[c];function p(i,l){return a(),s("div",null,o)}const r=n(e,[["render",p],["__file","class-main.html.vue"]]);export{r as default};
