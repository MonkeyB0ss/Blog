const t=JSON.parse('{"key":"v-73e7cb85","path":"/other/audition/JUC/CountDownLatch.html","title":"CountDownLatch","lang":"zh-CN","frontmatter":{"date":"2023-03-31T00:00:00.000Z","category":"面试","tag":["JUC"]},"headers":[{"level":2,"title":"概念","slug":"概念","link":"#概念","children":[]},{"level":2,"title":"场景","slug":"场景","link":"#场景","children":[]},{"level":2,"title":"解决方案","slug":"解决方案","link":"#解决方案","children":[]},{"level":2,"title":"完整代码","slug":"完整代码","link":"#完整代码","children":[]}],"git":{"createdTime":1680279876000,"updatedTime":1680279876000,"contributors":[{"name":"MonkeyBoss","email":"1912290362@qq.com","commits":1}]},"readingTime":{"minutes":2.23,"words":670},"filePathRelative":"other/audition/JUC/CountDownLatch.md","localizedDate":"2023年3月31日","excerpt":"<h1> CountDownLatch</h1>\\n<h2> 概念</h2>\\n<p>让一些线程阻塞直到另一些线程完成一系列操作才被唤醒</p>\\n<p>CountDownLatch主要有两个方法，当一个或多个线程调用await方法时，调用线程就会被阻塞。其它线程调用CountDown方法会将计数器减1（调用CountDown方法的线程不会被阻塞），当计数器的值变成零时，因调用await方法被阻塞的线程会被唤醒，继续执行</p>\\n<h2> 场景</h2>\\n<p>现在有这样一个场景，假设一个自习室里有7个人，其中有一个是班长，班长的主要职责就是在其它6个同学走了后，关灯，锁教室门，然后走人，因此班长是需要最后一个走的，那么有什么方法能够控制班长这个线程是最后一个执行，而其它线程是随机执行的</p>"}');export{t as data};
