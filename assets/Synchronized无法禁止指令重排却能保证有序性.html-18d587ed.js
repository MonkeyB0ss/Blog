const e=JSON.parse('{"key":"v-ee8ad7fc","path":"/other/audition/JUC/Synchronized%E6%97%A0%E6%B3%95%E7%A6%81%E6%AD%A2%E6%8C%87%E4%BB%A4%E9%87%8D%E6%8E%92%E5%8D%B4%E8%83%BD%E4%BF%9D%E8%AF%81%E6%9C%89%E5%BA%8F%E6%80%A7.html","title":"为什么Synchronized无法禁止指令重排，却能保证有序性","lang":"zh-CN","frontmatter":{"date":"2023-03-31T00:00:00.000Z","category":"面试","tag":["JUC"]},"headers":[{"level":2,"title":"前言","slug":"前言","link":"#前言","children":[]},{"level":2,"title":"标准解答","slug":"标准解答","link":"#标准解答","children":[]},{"level":2,"title":"来源","slug":"来源","link":"#来源","children":[]}],"git":{"createdTime":1680279876000,"updatedTime":1680279876000,"contributors":[{"name":"MonkeyBoss","email":"1912290362@qq.com","commits":1}]},"readingTime":{"minutes":2.38,"words":714},"filePathRelative":"other/audition/JUC/Synchronized无法禁止指令重排却能保证有序性.md","localizedDate":"2023年3月31日","excerpt":"<h1> 为什么Synchronized无法禁止指令重排，却能保证有序性</h1>\\n<h2> 前言</h2>\\n<p>首先我们要分析下这道题，这简单的一个问题，其实里面还是包含了很多信息的，要想回答好这个问题，面试者至少要知道一下概念：</p>\\n<ul>\\n<li>Java内存模型</li>\\n<li>并发编程有序性问题</li>\\n<li>指令重排</li>\\n<li>synchronized锁</li>\\n<li>可重入锁</li>\\n<li>排它锁</li>\\n<li>as-if-serial语义</li>\\n<li>单线程&amp;多线程</li>\\n</ul>\\n<h2> 标准解答</h2>\\n<p>为了进一步提升计算机各方面能力，在硬件层面做了很多优化，如处理器优化和指令重排等，但是这些技术的引入就会导致有序性问题。</p>"}');export{e as data};
