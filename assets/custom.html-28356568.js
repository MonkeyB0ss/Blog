const n=JSON.parse(`{"key":"v-3ff70dba","path":"/java/java-advanced/generic/custom.html","title":"自定义泛型类、泛型接口、泛型方法","lang":"zh-CN","frontmatter":{"date":"2022-12-03T00:00:00.000Z","category":"基础进阶","tag":["JAVA"]},"headers":[{"level":2,"title":"Order.java","slug":"order-java","link":"#order-java","children":[]},{"level":2,"title":"SubOrder.java","slug":"suborder-java","link":"#suborder-java","children":[]},{"level":2,"title":"SubOrder1.java","slug":"suborder1-java","link":"#suborder1-java","children":[]},{"level":2,"title":"注意点","slug":"注意点","link":"#注意点","children":[]},{"level":2,"title":"应用场景举例","slug":"应用场景举例","link":"#应用场景举例","children":[{"level":3,"title":"DAO.java","slug":"dao-java","link":"#dao-java","children":[]},{"level":3,"title":"CustomerDAO.java","slug":"customerdao-java","link":"#customerdao-java","children":[]},{"level":3,"title":"StudentDAO.java","slug":"studentdao-java","link":"#studentdao-java","children":[]}]}],"git":{"createdTime":1670051528000,"updatedTime":1670051528000,"contributors":[{"name":"MonkeyBoss","email":"1912290362@qq.com","commits":1}]},"readingTime":{"minutes":2.7,"words":809},"filePathRelative":"java/java-advanced/generic/custom.md","localizedDate":"2022年12月3日","excerpt":"<h1> 自定义泛型类、泛型接口、泛型方法</h1>\\n<h2> Order.java</h2>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">Order</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">T</span><span class=\\"token punctuation\\">&gt;</span></span> <span class=\\"token punctuation\\">{</span>\\n\\t<span class=\\"token class-name\\">String</span> orderName<span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token keyword\\">int</span> orderId<span class=\\"token punctuation\\">;</span>\\n\\t\\n\\t<span class=\\"token comment\\">// 类的内部结构就可以使用类的泛型</span>\\n\\t\\n\\t<span class=\\"token class-name\\">T</span> orderT<span class=\\"token punctuation\\">;</span>\\n\\t\\n\\t<span class=\\"token keyword\\">public</span> <span class=\\"token class-name\\">Order</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n\\t\\t<span class=\\"token comment\\">// 编译不通过</span>\\n\\t\\t<span class=\\"token comment\\">// T[] arr = new T[10];</span>\\n\\t\\t<span class=\\"token comment\\">// 编译通过</span>\\n\\t\\t<span class=\\"token class-name\\">T</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> arr <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">T</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Object</span><span class=\\"token punctuation\\">[</span><span class=\\"token number\\">10</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token punctuation\\">}</span>\\n\\t\\n\\t<span class=\\"token keyword\\">public</span> <span class=\\"token class-name\\">Order</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">String</span> orderName<span class=\\"token punctuation\\">,</span><span class=\\"token keyword\\">int</span> orderId<span class=\\"token punctuation\\">,</span><span class=\\"token class-name\\">T</span> orderT<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n\\t\\t<span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>orderName <span class=\\"token operator\\">=</span> orderName<span class=\\"token punctuation\\">;</span>\\n\\t\\t<span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>orderId <span class=\\"token operator\\">=</span> orderId<span class=\\"token punctuation\\">;</span>\\n\\t\\t<span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>orderT <span class=\\"token operator\\">=</span> orderT<span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token punctuation\\">}</span>\\n\\t\\n\\t<span class=\\"token comment\\">// 如下的个方法都不是泛型方法</span>\\n\\t<span class=\\"token keyword\\">public</span> <span class=\\"token class-name\\">T</span> <span class=\\"token function\\">getOrderT</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n\\t\\t<span class=\\"token keyword\\">return</span> orderT<span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token punctuation\\">}</span>\\n\\t\\n\\t<span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">setOrderT</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">T</span> orderT<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n\\t\\t<span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>orderT <span class=\\"token operator\\">=</span> orderT<span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token punctuation\\">}</span>\\n\\t\\n\\t<span class=\\"token annotation punctuation\\">@Override</span>\\n\\t<span class=\\"token keyword\\">public</span> <span class=\\"token class-name\\">String</span> <span class=\\"token function\\">toString</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n\\t\\t<span class=\\"token keyword\\">return</span> <span class=\\"token string\\">\\"Order{\\"</span> <span class=\\"token operator\\">+</span>\\n\\t\\t<span class=\\"token string\\">\\"orderName='\\"</span> <span class=\\"token operator\\">+</span> orderName <span class=\\"token operator\\">+</span> <span class=\\"token char\\">'\\\\''</span> <span class=\\"token operator\\">+</span>\\n\\t\\t<span class=\\"token string\\">\\", orderId=\\"</span> <span class=\\"token operator\\">+</span> orderId <span class=\\"token operator\\">+</span>\\n\\t\\t<span class=\\"token string\\">\\", orderT=\\"</span> <span class=\\"token operator\\">+</span> orderT <span class=\\"token operator\\">+</span>\\n\\t\\t<span class=\\"token char\\">'}'</span><span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token punctuation\\">}</span>\\n\\t<span class=\\"token comment\\">// 静态方法中不能使用类的泛型。</span>\\n\\t<span class=\\"token comment\\">// public static void show(T orderT){</span>\\n\\t<span class=\\"token comment\\">//      System.out.println(orderT);</span>\\n\\t<span class=\\"token comment\\">// }</span>\\n\\t\\n\\t<span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">show</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n\\t\\t<span class=\\"token comment\\">// 编译不通过</span>\\n\\t\\t<span class=\\"token comment\\">// try{</span>\\n\\t\\t<span class=\\"token comment\\">// }catch(T t){</span>\\n\\t\\t<span class=\\"token comment\\">// }</span>\\n\\t<span class=\\"token punctuation\\">}</span>\\n\\t\\n\\t<span class=\\"token comment\\">// 泛型方法：在方法中出现了泛型的结构，泛型参数与类的泛型参数没任何关系。</span>\\n\\t<span class=\\"token comment\\">// 换句话说，泛型方法所属的类是不是泛型类都没关系。</span>\\n\\t<span class=\\"token comment\\">// 泛型方法，可以声明为静态的。原因：泛型参数是在调用方法时确定的。并非在实例化类时确定。</span>\\n\\t<span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">static</span> <span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">E</span><span class=\\"token punctuation\\">&gt;</span></span> <span class=\\"token class-name\\">List</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">E</span><span class=\\"token punctuation\\">&gt;</span></span> <span class=\\"token function\\">copyFromArrayToList</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">E</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> arr<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n\\t\\n\\t\\t<span class=\\"token class-name\\">ArrayList</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">E</span><span class=\\"token punctuation\\">&gt;</span></span> list <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">ArrayList</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t\\n\\t\\t<span class=\\"token keyword\\">for</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">E</span> e <span class=\\"token operator\\">:</span> arr<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n\\t\\t\\tlist<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">add</span><span class=\\"token punctuation\\">(</span>e<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t<span class=\\"token punctuation\\">}</span>\\n\\t\\t\\n\\t\\t<span class=\\"token keyword\\">return</span> list<span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>"}`);export{n as data};
