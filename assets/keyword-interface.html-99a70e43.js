const n=JSON.parse('{"key":"v-a4d4d02c","path":"/java/java-basic/object/lower/keyword-interface.html","title":"关键字：interface","lang":"zh-CN","frontmatter":{"date":"2022-11-27T00:00:00.000Z","category":"基础","tag":["JAVA"]},"headers":[{"level":2,"title":"使用说明","slug":"使用说明","link":"#使用说明","children":[]},{"level":2,"title":"举例","slug":"举例","link":"#举例","children":[]},{"level":2,"title":"体会面向接口编程的思想","slug":"体会面向接口编程的思想","link":"#体会面向接口编程的思想","children":[]},{"level":2,"title":"Java8中关于接口的新规范","slug":"java8中关于接口的新规范","link":"#java8中关于接口的新规范","children":[]},{"level":2,"title":"代理模式","slug":"代理模式","link":"#代理模式","children":[]},{"level":2,"title":"工厂模式","slug":"工厂模式","link":"#工厂模式","children":[]}],"git":{"createdTime":1669558146000,"updatedTime":1669649886000,"contributors":[{"name":"MonkeyBoss","email":"1912290362@qq.com","commits":2}]},"readingTime":{"minutes":2.77,"words":832},"filePathRelative":"java/java-basic/object/lower/keyword-interface.md","localizedDate":"2022年11月27日","excerpt":"<h1> 关键字：interface</h1>\\n<p><code>interface</code>:接口</p>\\n<h2> 使用说明</h2>\\n<ol>\\n<li>\\n<p>接口使用interface来定义</p>\\n</li>\\n<li>\\n<p>Java中，接口和类是并列的两个结构</p>\\n</li>\\n<li>\\n<p>如何定义接口：定义接口中的成员</p>\\n<div class=\\"hint-container tip\\">\\n<p class=\\"hint-container-title\\">JDK7及以前</p>\\n<p>只能定义全局常量和抽象方法</p>\\n<ul>\\n<li>全局常量：<code>public static final</code>的.但是书写时，可以省略不写</li>\\n<li>抽象方法：<code>public abstract</code>的</li>\\n</ul>\\n</div>\\n<div class=\\"hint-container tip\\">\\n<p class=\\"hint-container-title\\">JDK8</p>\\n<p>除了定义全局常量和抽象方法之外，还可以定义静态方法、默认方法（略)</p>\\n</div>\\n</li>\\n<li>\\n<p>接口中不能定义构造器的！意味着接口不可以实例化</p>\\n</li>\\n<li>\\n<p>Java开发中，接口通过让类去实现(implements)的方式来使用.</p>\\n<p>如果实现类覆盖了接口中的所抽象方法，则此实现类就可以实例化</p>\\n<p>如果实现类没覆盖接口中所的抽象方法，则此实现类仍为一个抽象类</p>\\n</li>\\n<li>\\n<p>Java类可以实现多个接口 ---&gt;弥补了Java单继承性的局限性</p>\\n<p>格式：</p>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">AA</span> <span class=\\"token keyword\\">extends</span> <span class=\\"token class-name\\">BB</span> <span class=\\"token keyword\\">implements</span> <span class=\\"token class-name\\">CC</span><span class=\\"token punctuation\\">,</span><span class=\\"token constant\\">DD</span><span class=\\"token punctuation\\">,</span><span class=\\"token constant\\">EE</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div></div></div></li>\\n<li>\\n<p>接口与接口之间可以继承，而且可以多继承</p>\\n</li>\\n<li>\\n<p>接口的具体使用，体现多态性</p>\\n</li>\\n<li>\\n<p>接口，实际上可以看做是一种规范</p>\\n</li>\\n</ol>"}');export{n as data};
