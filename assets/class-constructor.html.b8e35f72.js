import{_ as n}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as a,c as s,e}from"./app.08346de6.js";const t={},i=e(`<h1 id="类的结构之三-构造器" tabindex="-1"><a class="header-anchor" href="#类的结构之三-构造器" aria-hidden="true">#</a> 类的结构之三：构造器</h1><h2 id="作用" tabindex="-1"><a class="header-anchor" href="#作用" aria-hidden="true">#</a> 作用</h2><ol><li>创建对象</li><li>初始化对象的信息</li></ol><h2 id="使用说明" tabindex="-1"><a class="header-anchor" href="#使用说明" aria-hidden="true">#</a> 使用说明</h2><ol><li>如果没显式的定义类的构造器的话，则系统默认提供一个空参的构造器</li><li>定义构造器的格式：权限修饰符 类名(形参列表){}</li><li>一个类中定义的多个构造器，彼此构成重载</li><li>一旦我们显式的定义了类的构造器之后，系统就不再提供默认的空参构造器</li><li>一个类中，至少会有一个构造器。</li></ol><h2 id="举例" tabindex="-1"><a class="header-anchor" href="#举例" aria-hidden="true">#</a> 举例</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 构造器</span>
<span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Person().....&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>
    name <span class="token operator">=</span> n<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
	
<span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> n<span class="token punctuation">,</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>
    name <span class="token operator">=</span> n<span class="token punctuation">;</span>
    age <span class="token operator">=</span> a<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="属性赋值顺序" tabindex="-1"><a class="header-anchor" href="#属性赋值顺序" aria-hidden="true">#</a> 属性赋值顺序</h2><div class="custom-container info"><p class="custom-container-title">属性赋值的先后顺序</p><p>① 默认初始化<br> ② 显式初始化<br> ③ 构造器中初始化<br> ④ 通过&quot;对象.方法&quot; 或 &quot;对象.属性&quot;的方式，赋值<br> 以上操作的先后顺序：① - ② - ③ - ④</p></div><h2 id="javabean的概念" tabindex="-1"><a class="header-anchor" href="#javabean的概念" aria-hidden="true">#</a> JavaBean的概念</h2><div class="custom-container info"><p class="custom-container-title">所谓JavaBean，是指符合如下标准的Java类</p><ol><li>类是公共的</li><li>一个无参的公共的构造器</li><li>属性，且对应的get、set方法</li></ol></div>`,11),c=[i];function l(o,p){return a(),s("div",null,c)}const d=n(t,[["render",l],["__file","class-constructor.html.vue"]]);export{d as default};
