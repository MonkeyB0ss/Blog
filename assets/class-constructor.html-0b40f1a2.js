const n=JSON.parse('{"key":"v-2d386659","path":"/java/java-basic/object/upper/class-constructor.html","title":"类的结构之三：构造器","lang":"zh-CN","frontmatter":{"date":"2022-11-20T00:00:00.000Z","category":"基础","tag":["JAVA"]},"headers":[{"level":2,"title":"作用","slug":"作用","link":"#作用","children":[]},{"level":2,"title":"使用说明","slug":"使用说明","link":"#使用说明","children":[]},{"level":2,"title":"举例","slug":"举例","link":"#举例","children":[]},{"level":2,"title":"属性赋值顺序","slug":"属性赋值顺序","link":"#属性赋值顺序","children":[]},{"level":2,"title":"JavaBean的概念","slug":"javabean的概念","link":"#javabean的概念","children":[]}],"git":{"createdTime":1669474184000,"updatedTime":1669474184000,"contributors":[{"name":"MonkeyBoss","email":"1912290362@qq.com","commits":1}]},"readingTime":{"minutes":0.97,"words":291},"filePathRelative":"java/java-basic/object/upper/class-constructor.md","localizedDate":"2022年11月20日","excerpt":"<h1> 类的结构之三：构造器</h1>\\n<h2> 作用</h2>\\n<ol>\\n<li>创建对象</li>\\n<li>初始化对象的信息</li>\\n</ol>\\n<h2> 使用说明</h2>\\n<ol>\\n<li>如果没显式的定义类的构造器的话，则系统默认提供一个空参的构造器</li>\\n<li>定义构造器的格式：权限修饰符 类名(形参列表){}</li>\\n<li>一个类中定义的多个构造器，彼此构成重载</li>\\n<li>一旦我们显式的定义了类的构造器之后，系统就不再提供默认的空参构造器</li>\\n<li>一个类中，至少会有一个构造器。</li>\\n</ol>\\n<h2> 举例</h2>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token comment\\">// 构造器</span>\\n<span class=\\"token keyword\\">public</span> <span class=\\"token class-name\\">Person</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Person().....\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">public</span> <span class=\\"token class-name\\">Person</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">String</span> n<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n    name <span class=\\"token operator\\">=</span> n<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\t\\n<span class=\\"token keyword\\">public</span> <span class=\\"token class-name\\">Person</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">String</span> n<span class=\\"token punctuation\\">,</span><span class=\\"token keyword\\">int</span> a<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n    name <span class=\\"token operator\\">=</span> n<span class=\\"token punctuation\\">;</span>\\n    age <span class=\\"token operator\\">=</span> a<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>"}');export{n as data};
