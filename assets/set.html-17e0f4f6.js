const l=JSON.parse('{"key":"v-77e0b3f2","path":"/java/java-advanced/collection/set.html","title":"Collection子接口：Set接口","lang":"zh-CN","frontmatter":{"date":"2022-12-01T00:00:00.000Z","category":"基础进阶","tag":["JAVA"]},"headers":[{"level":2,"title":"存储的数据特点","slug":"存储的数据特点","link":"#存储的数据特点","children":[]},{"level":2,"title":"元素添加过程","slug":"元素添加过程","link":"#元素添加过程","children":[]},{"level":2,"title":"常用方法","slug":"常用方法","link":"#常用方法","children":[]},{"level":2,"title":"常用实现类：","slug":"常用实现类","link":"#常用实现类","children":[]},{"level":2,"title":"存储对象所在类的要求","slug":"存储对象所在类的要求","link":"#存储对象所在类的要求","children":[]},{"level":2,"title":"TreeSet的使用","slug":"treeset的使用","link":"#treeset的使用","children":[{"level":3,"title":"使用说明","slug":"使用说明","link":"#使用说明","children":[]},{"level":3,"title":"常用的排序方式","slug":"常用的排序方式","link":"#常用的排序方式","children":[]}]}],"git":{"createdTime":1669908955000,"updatedTime":1669908955000,"contributors":[{"name":"MonkeyBoss","email":"1912290362@qq.com","commits":1}]},"readingTime":{"minutes":3.56,"words":1067},"filePathRelative":"java/java-advanced/collection/set.md","localizedDate":"2022年12月1日","excerpt":"<h1> Collection子接口：Set接口</h1>\\n<h2> 存储的数据特点</h2>\\n<p>无序的、不可重复的元素</p>\\n<p>具体的:以HashSet为例说明</p>\\n<ol>\\n<li>无序性：不等于随机性。存储的数据在底层数组中并非照数组索引的顺序添加，而是根据数据的哈希值决定的。</li>\\n<li>不可重复性：保证添加的元素照equals()判断时，不能返回true.即：相同的元素只能添加一个。</li>\\n</ol>\\n<h2> 元素添加过程</h2>\\n<p>以HashSet为例</p>\\n<ol>\\n<li>我们向HashSet中添加元素a,首先调用元素a所在类的hashCode()方法，计算元素a的哈希值，</li>\\n<li>此哈希值接着通过某种算法计算出在HashSet底层数组中的存放位置（即为：索引位置，判断</li>\\n<li>数组此位置上是否已经元素：\\n<ul>\\n<li>如果此位置上没其他元素，则元素a添加成功。 ---&gt;情况1</li>\\n<li>如果此位置上其他元素b(或以链表形式存在的多个元素，则比较元素a与元素b的hash值：\\n<ul>\\n<li>如果hash值不相同，则元素a添加成功。---&gt;情况2</li>\\n<li>如果hash值相同，进而需要调用元素a所在类的equals()方法：\\n<ul>\\n<li>equals()返回true,元素a添加失败</li>\\n<li>equals()返回false,则元素a添加成功。---&gt;情况2</li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n</ol>"}');export{l as data};
