const e=JSON.parse('{"key":"v-20984be0","path":"/java/design-patterns/factory.html","title":"工厂模式","lang":"zh-CN","frontmatter":{"date":"2022-11-27T00:00:00.000Z","category":"基础","tag":["JAVA","设计模式"]},"headers":[{"level":2,"title":"解决的问题","slug":"解决的问题","link":"#解决的问题","children":[]},{"level":2,"title":"具体模式","slug":"具体模式","link":"#具体模式","children":[]}],"git":{"createdTime":1669649886000,"updatedTime":1669649886000,"contributors":[{"name":"MonkeyBoss","email":"1912290362@qq.com","commits":1}]},"readingTime":{"minutes":0.6,"words":181},"filePathRelative":"java/design-patterns/factory.md","localizedDate":"2022年11月27日","excerpt":"<h1> 工厂模式</h1>\\n<h2> 解决的问题</h2>\\n<p>实现了创建者与调用者的分离，即将创建对象的具体过程屏蔽隔离起来，达到提高灵活性的目的。</p>\\n<h2> 具体模式</h2>\\n<p><code>简单工厂模式</code>：用来生产同一等级结构中的任意产品。（对于增加新的产品，需要修改已有代码）</p>\\n<p><code>工厂方法模式</code>：用来生产同一等级结构中的固定产品。（支持增加任意产品)</p>\\n<p><code>抽象工厂模式</code>：用来生产不同产品族的全部产品。（对于增加新的产品，无能为力；支持增加产品族)</p>\\n"}');export{e as data};
