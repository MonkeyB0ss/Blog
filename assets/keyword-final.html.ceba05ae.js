import{_ as a}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as e,c as i,e as t}from"./app.2f82c418.js";const c={},n=t('<h1 id="关键字-final" tabindex="-1"><a class="header-anchor" href="#关键字-final" aria-hidden="true">#</a> 关键字：final</h1><p><code>final</code>：最终的</p><h2 id="可以用来修饰" tabindex="-1"><a class="header-anchor" href="#可以用来修饰" aria-hidden="true">#</a> 可以用来修饰</h2><p>类、方法、变量</p><h2 id="具体" tabindex="-1"><a class="header-anchor" href="#具体" aria-hidden="true">#</a> 具体</h2><h3 id="用来修饰一个类" tabindex="-1"><a class="header-anchor" href="#用来修饰一个类" aria-hidden="true">#</a> 用来修饰一个类</h3><div class="custom-container tip"><p class="custom-container-title">提示</p><p>此类不能被其他类所继承。</p></div><div class="custom-container info"><p class="custom-container-title">比如</p><p><code>String类</code>、<code>System类</code>、<code>StringBuffer类</code></p></div><h3 id="用来修饰方法" tabindex="-1"><a class="header-anchor" href="#用来修饰方法" aria-hidden="true">#</a> 用来修饰方法</h3><div class="custom-container tip"><p class="custom-container-title">提示</p><p>表明此方法不可以被重写</p></div><div class="custom-container info"><p class="custom-container-title">比如</p><p>Object类中getClass();</p></div><h3 id="用来修饰变量" tabindex="-1"><a class="header-anchor" href="#用来修饰变量" aria-hidden="true">#</a> 用来修饰变量</h3><div class="custom-container tip"><p class="custom-container-title">提示</p><p>此时的&quot;变量&quot;就称为是一个常量</p></div><ol><li>final修饰属性：可以考虑赋值的位置：显式初始化、代码块中初始化、构造器中初始化</li><li>final修饰局部变量：尤其是使用final修饰形参时，表明此形参是一个常量。当我们调用此方法时，给常量形参赋一个实参。一旦赋值以后，就只能在方法体内使用此形参，但不能进行重新赋值。</li></ol><h3 id="static-final-用来修饰属性" tabindex="-1"><a class="header-anchor" href="#static-final-用来修饰属性" aria-hidden="true">#</a> static final 用来修饰属性</h3><p><strong><code>全局常量</code></strong></p>',16),r=[n];function s(o,d){return e(),i("div",null,r)}const p=a(c,[["render",s],["__file","keyword-final.html.vue"]]);export{p as default};
