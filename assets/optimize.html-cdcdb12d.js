const l=JSON.parse('{"key":"v-9d59d500","path":"/mysql/mysql-advanced/optimize.html","title":"第10章_索引优化与查询优化","lang":"zh-CN","frontmatter":{"date":"2022-12-14T00:00:00.000Z","category":"基础进阶","tag":["MySQL"]},"headers":[{"level":2,"title":"1. 索引失效案例","slug":"_1-索引失效案例","link":"#_1-索引失效案例","children":[{"level":3,"title":"1.1 全值匹配我最爱","slug":"_1-1-全值匹配我最爱","link":"#_1-1-全值匹配我最爱","children":[]},{"level":3,"title":"1.2 最佳左前缀法则","slug":"_1-2-最佳左前缀法则","link":"#_1-2-最佳左前缀法则","children":[]},{"level":3,"title":"1.3 主键插入顺序","slug":"_1-3-主键插入顺序","link":"#_1-3-主键插入顺序","children":[]},{"level":3,"title":"1.4 计算、函数、类型转换(自动或手动)导致索引失效","slug":"_1-4-计算、函数、类型转换-自动或手动-导致索引失效","link":"#_1-4-计算、函数、类型转换-自动或手动-导致索引失效","children":[]},{"level":3,"title":"1.5 类型转换导致索引失效","slug":"_1-5-类型转换导致索引失效","link":"#_1-5-类型转换导致索引失效","children":[]},{"level":3,"title":"1.6 范围条件右边的列索引失效","slug":"_1-6-范围条件右边的列索引失效","link":"#_1-6-范围条件右边的列索引失效","children":[]},{"level":3,"title":"1.7 不等于(!= 或者<>)索引失效","slug":"_1-7-不等于-或者-索引失效","link":"#_1-7-不等于-或者-索引失效","children":[]},{"level":3,"title":"1.8 is null可以使用索引，is not null无法使用索引","slug":"_1-8-is-null可以使用索引-is-not-null无法使用索引","link":"#_1-8-is-null可以使用索引-is-not-null无法使用索引","children":[]},{"level":3,"title":"1.9 like以通配符%开头索引失效","slug":"_1-9-like以通配符-开头索引失效","link":"#_1-9-like以通配符-开头索引失效","children":[]},{"level":3,"title":"1.10 OR 前后存在非索引的列，索引失效","slug":"_1-10-or-前后存在非索引的列-索引失效","link":"#_1-10-or-前后存在非索引的列-索引失效","children":[]},{"level":3,"title":"1.11 数据库和表的字符集统一使用utf8mb4","slug":"_1-11-数据库和表的字符集统一使用utf8mb4","link":"#_1-11-数据库和表的字符集统一使用utf8mb4","children":[]}]},{"level":2,"title":"2. 关联查询优化","slug":"_2-关联查询优化","link":"#_2-关联查询优化","children":[{"level":3,"title":"2.1 Index Nested-Loop Join（索引嵌套循环连接）","slug":"_2-1-index-nested-loop-join-索引嵌套循环连接","link":"#_2-1-index-nested-loop-join-索引嵌套循环连接","children":[]},{"level":3,"title":"2.2 Block Nested-Loop Join（块嵌套循环连接）","slug":"_2-2-block-nested-loop-join-块嵌套循环连接","link":"#_2-2-block-nested-loop-join-块嵌套循环连接","children":[]},{"level":3,"title":"2.3 Hash Join","slug":"_2-3-hash-join","link":"#_2-3-hash-join","children":[]}]},{"level":2,"title":"3. 子查询优化","slug":"_3-子查询优化","link":"#_3-子查询优化","children":[]},{"level":2,"title":"4. 排序优化","slug":"_4-排序优化","link":"#_4-排序优化","children":[]},{"level":2,"title":"5. GROUP BY优化","slug":"_5-group-by优化","link":"#_5-group-by优化","children":[]},{"level":2,"title":"6. 优化分页查询","slug":"_6-优化分页查询","link":"#_6-优化分页查询","children":[]},{"level":2,"title":"7. 优先考虑覆盖索引","slug":"_7-优先考虑覆盖索引","link":"#_7-优先考虑覆盖索引","children":[{"level":3,"title":"7.1 什么是覆盖索引？","slug":"_7-1-什么是覆盖索引","link":"#_7-1-什么是覆盖索引","children":[]},{"level":3,"title":"7.2 覆盖索引的利弊","slug":"_7-2-覆盖索引的利弊","link":"#_7-2-覆盖索引的利弊","children":[]}]},{"level":2,"title":"8. 索引条件下推","slug":"_8-索引条件下推","link":"#_8-索引条件下推","children":[{"level":3,"title":"8.1 使用前后的扫描过程","slug":"_8-1-使用前后的扫描过程","link":"#_8-1-使用前后的扫描过程","children":[]}]},{"level":2,"title":"9. 其它查询优化策略","slug":"_9-其它查询优化策略","link":"#_9-其它查询优化策略","children":[{"level":3,"title":"9.1 EXISTS 和 IN 的区分","slug":"_9-1-exists-和-in-的区分","link":"#_9-1-exists-和-in-的区分","children":[]},{"level":3,"title":"9.2 COUNT(*)与COUNT(具体字段)效率","slug":"_9-2-count-与count-具体字段-效率","link":"#_9-2-count-与count-具体字段-效率","children":[]},{"level":3,"title":"9.3 关于SELECT(*)","slug":"_9-3-关于select","link":"#_9-3-关于select","children":[]},{"level":3,"title":"9.4 LIMIT 1 对优化的影响","slug":"_9-4-limit-1-对优化的影响","link":"#_9-4-limit-1-对优化的影响","children":[]},{"level":3,"title":"9.5 多使用COMMIT","slug":"_9-5-多使用commit","link":"#_9-5-多使用commit","children":[]}]}],"git":{"createdTime":1671029305000,"updatedTime":1671029305000,"contributors":[{"name":"MonkeyBoss","email":"1912290362@qq.com","commits":1}]},"readingTime":{"minutes":13.12,"words":3936},"filePathRelative":"mysql/mysql-advanced/optimize.md","localizedDate":"2022年12月14日","excerpt":"<h1> 第10章_索引优化与查询优化</h1>\\n<h2> <strong>1.</strong> <strong>索引失效案例</strong></h2>\\n<p>MySQL中<code>提高性能</code>的一个最有效的方式是对数据表<code>设计合理的索引</code>。索引提供了访问高效数据的方法，并且加快查询的速度，因此索引对查询的速度有着至关重要的影响。</p>\\n<ul>\\n<li>使用索引可以<code>快速地定位</code>表中的某条记录，从而提高数据库查询的速度，提高数据库的性能。</li>\\n<li>如果查询时没有使用索引，查询语句就会<code>扫描表中的所有记录</code>。在数据量大的情况下，这样查询的速度会很慢。</li>\\n</ul>"}');export{l as data};
